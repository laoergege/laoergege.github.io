"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[8011],{1748:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-317472f1",path:"/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/TypeScript%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC.html",title:"TypeScript 类型推导及类型系统",lang:"zh-CN",frontmatter:{release:!0,tags:["typescript"],description:"了解 TypeScript 的类型推导以及其背后离不开的类型系统及类型兼容原理。"},excerpt:"",headers:[{level:2,title:"let、const 的变量声明推导",slug:"let、const-的变量声明推导",children:[]},{level:2,title:"类型流程分析与类型守卫",slug:"类型流程分析与类型守卫",children:[{level:3,title:"类型守卫函数",slug:"类型守卫函数",children:[]}]},{level:2,title:"类型兼容判断",slug:"类型兼容判断",children:[{level:3,title:"结构化类型",slug:"结构化类型",children:[]},{level:3,title:"类型层级",slug:"类型层级",children:[]},{level:3,title:"函数的协变与逆变",slug:"函数的协变与逆变",children:[]}]},{level:2,title:"学习参考",slug:"学习参考",children:[]}],git:{createdTime:1659944981e3,updatedTime:1661172477e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:3}]}}},9007:(s,n,a)=>{a.r(n),a.d(n,{default:()=>f});var l=a(5393);const p=a.p+"assets/img/1658850634710.8ac73f26.png",o=a.p+"assets/img/1658850653587.a290b3b6.png",e=a.p+"assets/img/1658850677415.eebc7e4e.png",c=a.p+"assets/img/1659187701509.de541cdf.png",t=a.p+"assets/img/1659758577343.25c52b56.png",r=(0,l.uE)('<h1 id="typescript-类型推导及类型系统" tabindex="-1"><a class="header-anchor" href="#typescript-类型推导及类型系统" aria-hidden="true">#</a> TypeScript 类型推导及类型系统</h1><p>TypeScript 中除了手动声明类型，还会自动类型推导，即基于开发者代码进行类型推导分析。类型推导：</p><ul><li><a href="#letconst-%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E6%8E%A8%E5%AF%BC">变量声明推导</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB">类型流程分析与类型守卫</a></li><li>上下文类型约束</li><li>类型兼容判断</li></ul><p>类型推导过程中，免不了对类型兼容判断，即将一个值是否可以赋值给另一个变量类型，这其中判断离不开 TypeScript 的类型系统设计原理：</p><ul><li>类型兼容 <ul><li><a href="">结构化类型系统</a></li><li>类型层级</li><li>函数的协变与逆变</li><li>联合类型</li></ul></li></ul><p>类型断言：在 TypeScript 类型分析不正确或不符合预期时，将其断言为此处的正确类型。</p><ul><li><code>variable as type</code>、<code>&lt;type&gt;variable</code></li><li><code>as const</code>：推断为常量类型</li><li>非空断言 <code>!</code></li></ul><h2 id="let、const-的变量声明推导" tabindex="-1"><a class="header-anchor" href="#let、const-的变量声明推导" aria-hidden="true">#</a> let、const 的变量声明推导</h2><ul><li>使用 let 声明的变量是可以再次赋值的，在 TypeScript 中要求赋值类型始终与原类型一致（如果声明了的话）。因此对于 let 声明，只需要推导至这个值从属的类型即可。</li><li>而 const 声明的原始类型变量将不再可变，因此类型可以直接一步到位收窄到最精确的字面量类型，但对象类型变量仍可变（但同样会要求其属性值类型保持一致）。</li></ul><p><img src="'+p+'" alt="图 6"></p><p><img src="'+o+'" alt="图 7"></p><p><img src="'+e+'" alt="图 8"></p><h2 id="类型流程分析与类型守卫" tabindex="-1"><a class="header-anchor" href="#类型流程分析与类型守卫" aria-hidden="true">#</a> 类型流程分析与类型守卫</h2><p>类型的控制流分析：typescript 会分析代码控制流程结构，借助类型守卫不断尝试<strong>收窄类型</strong>。定义类型守卫的方式有：</p><ul><li>typeof：通过类型判断的方式</li><li>in：通过属性存在差异或者类型差异的方式 <ul><li>无法对复合类型构成的联合类型的同名属性做类型守卫，同名属性类型判断必须精确到字面量</li></ul></li><li>instanceof：通过判断原型链的方式</li></ul><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// typeof</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">declare</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">strOrNumOrBool</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> strOrNumOrBool </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;string&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 一定是字符串！</span></span>\n<span class="line"><span style="color:#24292F;">  strOrNumOrBool.</span><span style="color:#8250DF;">charAt</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">1</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">} </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> strOrNumOrBool </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;number&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 一定是数字！</span></span>\n<span class="line"><span style="color:#24292F;">  strOrNumOrBool.</span><span style="color:#8250DF;">toFixed</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">} </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> strOrNumOrBool </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;boolean&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 一定是布尔值！</span></span>\n<span class="line"><span style="color:#24292F;">  strOrNumOrBool </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">} </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// in</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">Foo</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">foo</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">kind</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;foo&quot;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">fooOnly</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">shared</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">Bar</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">bar</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">kind</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;bar&quot;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">barOnly</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">shared</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">handle</span><span style="color:#24292F;">(</span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Foo</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#953800;">Bar</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 属性存在差异</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#0A3069;">&quot;foo&quot;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> input) {</span></span>\n<span class="line"><span style="color:#24292F;">    input.fooOnly;</span></span>\n<span class="line"><span style="color:#24292F;">  } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    input.barOnly;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 无法对复合类型构成的联合类型的同名属性做类型守卫</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> input.shared </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;string&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    input.fooOnly; </span><span style="color:#6E7781;">// 报错</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 同名但不同类型的属性要精确到字面量进行区分</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (input.kind </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;foo&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    input.fooOnly;</span></span>\n<span class="line"><span style="color:#24292F;">  } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    input.barOnly;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// instanceof</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">FooBase</span><span style="color:#24292F;"> {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">BarBase</span><span style="color:#24292F;"> {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Foo</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">FooBase</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">fooOnly</span><span style="color:#24292F;">() {}</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Bar</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">BarBase</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">barOnly</span><span style="color:#24292F;">() {}</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">handle</span><span style="color:#24292F;">(</span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Foo</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#953800;">Bar</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (input </span><span style="color:#CF222E;">instanceof</span><span style="color:#24292F;"> </span><span style="color:#953800;">FooBase</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    input.</span><span style="color:#8250DF;">fooOnly</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">  } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    input.</span><span style="color:#8250DF;">barOnly</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="类型守卫函数" tabindex="-1"><a class="header-anchor" href="#类型守卫函数" aria-hidden="true">#</a> 类型守卫函数</h3><p>通常我们会把某些分支判断逻辑封装到一个函数里去，称为守卫函数。但在 TypeScript 类型控制流分析做不到跨函数上下文来进行类型的信息收集（但别的类型语言中可能是支持的）。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isString</span><span style="color:#24292F;">(</span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">input</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">is</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> input </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;string&quot;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">foo</span><span style="color:#24292F;">(</span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isString</span><span style="color:#24292F;">(input)) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 报错，在这里变成了 number 类型</span></span>\n<span class="line"><span style="color:#24292F;">    input.</span><span style="color:#8250DF;">replace</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;linbudu&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;linbudu599&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> input </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;number&quot;</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// ...</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>TypeScript 引入了 is 关键字来显式地提供类型信息，通过这种方式的函数叫做类型守卫：</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isString</span><span style="color:#24292F;">(</span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">input</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">is</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> input </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;string&quot;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>input 函数的某个参数；</li><li>is string，即 <strong>is 关键字 + 预期类型</strong>，即如果这个函数成功返回为 true，那么 is 关键字前这个入参的类型就是指定类型，而且这个类型守卫调用方后续的类型控制流分析收集到</li></ul><h2 id="类型兼容判断" tabindex="-1"><a class="header-anchor" href="#类型兼容判断" aria-hidden="true">#</a> 类型兼容判断</h2><p>在 TypeScript 代码中，判断类型兼容的方式：</p><ol><li>条件类型来判断类型兼容性<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;linbudu&quot;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span></code></pre></div></li><li>通过赋值来进行兼容性检查的方式<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> test</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;123&quot;</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 报错</span></span>\n<span class="line"></span></code></pre></div></li></ol><p>理论上来说，只要具备“父子关系”的子类型才能够被父类型兼容，父子关系类型的情况有：</p><ul><li>结构化类型</li><li>类型层级</li><li>函数的协变与逆变</li><li>联合类型：比较一个联合类型是否可被视为另一个联合类型的子集，即这个联合类型中所有成员在另一个联合类型中都能找到</li></ul><h3 id="结构化类型" tabindex="-1"><a class="header-anchor" href="#结构化类型" aria-hidden="true">#</a> 结构化类型</h3><p>TypeScript 的<strong>对象类型是基于结构化类型系统</strong>：TypeScript 比较两个类型并非基于类型及名显示继承的方式进行兼容性判断的类型系统（标称类型系统），而是比较这两个类型上实际拥有的属性与方法。TypeScript 遵循面向对象编程中的里氏替换原则，只要子类型结构包含兼容父类型结构即可：</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Cat</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">eat</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">eat</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">599</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">feedCat</span><span style="color:#24292F;">(</span><span style="color:#953800;">cat</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Cat</span><span style="color:#24292F;">) { }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#8250DF;">feedCat</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Dog</span><span style="color:#24292F;">())</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">test</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span><span style="color:#953800;">key</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> }</span></span>\n<span class="line"></span></code></pre></div><h4 id="在-typescript-中模拟标称类型系统" tabindex="-1"><a class="header-anchor" href="#在-typescript-中模拟标称类型系统" aria-hidden="true">#</a> 在 TypeScript 中模拟标称类型系统</h4><blockquote><p>类型的重要意义之一是限制了数据的可用操作与实际意义</p></blockquote><p>这一点在标称类型系统中的体现要更加明显。在下面例子中，结构化类型系统会把 USD 与 CNY （分别代表美元单位与人民币单位）被认为是两个完全一致的类型，因此在 addCNY 函数中类型不起到限制，可以传入 USD 类型的变量。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">USD</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">CNYCount</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">200</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">USDCount</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">USD</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">200</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">addCNY</span><span style="color:#24292F;">(</span><span style="color:#953800;">source</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;">, </span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> source </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> input;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#8250DF;">addCNY</span><span style="color:#24292F;">(CNYCount, USDCount);</span></span>\n<span class="line"></span></code></pre></div><p>在结构化类型系统中，如何像标称类型系统，类型名称起到实际意义呢？<strong>只要通过类型附带的额外信息来实现即可</strong>。</p><ol><li><p>交叉类型的方式来实现信息的附加（基于类型层面）</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">declare</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">tag</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">unique</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">symbol</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">declare</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Tagged</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Token</span><span style="color:#24292F;">&gt; </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">readonly</span><span style="color:#24292F;"> [tag]</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Token</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Opaque</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Type</span><span style="color:#24292F;">, </span><span style="color:#953800;">Token</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">&gt; </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Type</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">Tagged</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Token</span><span style="color:#24292F;">&gt;;</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>虽然对象类型和原始数据类型的交集，按集合逻辑应该是空集，但在 ts 中最终表现为 装箱 后与对象类型的属性并集。这实际上完全是为了另一个目的：nominal，即使得“类型别名”(type)具有唯一性（或者叫 tag）</p></blockquote></li><li><p>class 方式：可通过非公开（即 private / protected ）的额外属性实现了类型信息的附加。基于 class 即可做到类型检查，还能在运行时检查。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">private</span><span style="color:#24292F;"> </span><span style="color:#953800;">__tag</span><span style="color:#CF222E;">!:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">constructor</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">) {}</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">USD</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">private</span><span style="color:#24292F;"> </span><span style="color:#953800;">__tag</span><span style="color:#CF222E;">!:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">constructor</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">) {}</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">CNYCount</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">CNY</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">100</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">USDCount</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">USD</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">100</span><span style="color:#24292F;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">addCNY</span><span style="color:#24292F;">(</span><span style="color:#953800;">source</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;">, </span><span style="color:#953800;">input</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">CNY</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> source.value </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> input.value;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#8250DF;">addCNY</span><span style="color:#24292F;">(CNYCount, CNYCount);</span></span>\n<span class="line"><span style="color:#6E7781;">// 报错了！</span></span>\n<span class="line"><span style="color:#8250DF;">addCNY</span><span style="color:#24292F;">(CNYCount, USDCount);</span></span>\n<span class="line"></span></code></pre></div></li></ol><h3 id="类型层级" tabindex="-1"><a class="header-anchor" href="#类型层级" aria-hidden="true">#</a> 类型层级</h3><p>类型层级实际上反映的是 TypeScript 类型系统中所有类型的兼容关系。</p><p>类型层级模型：</p><p><img src="'+c+'" alt="图 1"></p><ol><li>任意类型都可以赋值给 Top Type</li><li>Object：包含了下层所有的类型（TypeScript 继承 JavaScript 设计：Object 是原型链顶端）</li><li>字面量类型 &lt; 对应的原始类型 &lt; 对应的装箱类型 &lt; Object</li><li>never 表示一个“虚无”的类型，一个根本不存在的类型，处于最底层，是任何类型的子类型 <ol><li>never 表示永远不存在的类型，比如函数总抛出异常或者死循环、两个不存在交集的类型强行进行交集运算，这些都不会产生值产生类型</li><li>never 类型仅能被赋值给另外一个 never 类型</li></ol></li><li>表示一个对象类型有三种：Object vs {} vs object，而且这三种关系比较特别 <ul><li>object：object 的引入就是为了解决对 Object 类型的错误使用，它代表所有非原始类型的类型，即数组、对象与函数类型这些对象类型<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">t</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">String</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// true</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">t1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#953800;">String</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// true</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">t2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// false</span></span>\n<span class="line"></span></code></pre></div>系统设定下，Object、object 都是表示对象类型，故这里比较特殊，形成了你中有我、我中有你的神奇现象。<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result17</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#953800;">Object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result20</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"></span></code></pre></div></li><li><code>{}</code>：类似 Object，但又可以看作是一个对象字面量<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result16</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {} </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result18</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> {} </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result19</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> {} </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">Result21</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {} </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#953800;">Object</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"></span></code></pre></div>这里的 <code>{} extends</code> 和 <code>extends {}</code> 实际上是两种完全不同的比较方式。<code>{} extends object</code> 和 <code>{} extends Object</code> 意味着， <code>{}</code> 是 object 和 Object 的字面量类型，是从类型信息的层面出发的，即字面量类型在基础类型之上提供了更详细的类型信息。<code>object extends {}</code> 和 <code>Object extends {}</code> 则是从结构化类型系统的比较出发的，即 <code>{}</code> 作为一个一无所有的空对象，几乎可以被视作是所有类型的基类，万物的起源</li></ul></li></ol><p>类型层级下的心智模型：</p><ol><li><p>子类型可赋值给父类型，即向上转换（upcast）：TypeScript 遵循 Liskov 替换原则，向上转换是安全的，因此编译器可以让您隐式执行它，无需提出任何问题。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> t</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">123</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> a</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> t;</span></span>\n<span class="line"></span></code></pre></div><p>实际上类型断言的工作原理也和类型层级有关，在判断断言是否成立，即差异是否能接受时，实际上是向上转型看否能够找到一个相同的父类型。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">(t </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;123&quot;</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 利用类型层级，先向上断言，再向下断言</span></span>\n<span class="line"><span style="color:#24292F;">  t </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span></span>\n<span class="line"><span style="color:#24292F;">) </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;123&quot;</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span></code></pre></div><p>当然 TypeScript 也有不允许隐式向上转换的情况：<strong>赋值时不允许字面量对象隐式向上转换</strong></p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> { </span><span style="color:#953800;">name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">; </span><span style="color:#953800;">email</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> };</span></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithoutEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> { </span><span style="color:#953800;">name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">A</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithoutEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// true</span></span>\n<span class="line"><span style="color:#6E7781;">// 但是下面情况却不被允许</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> userB</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithoutEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> { name: </span><span style="color:#0A3069;">&quot;foo&quot;</span><span style="color:#24292F;">, email: </span><span style="color:#0A3069;">&quot;foo@gmail.com&quot;</span><span style="color:#24292F;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> userB2</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithoutEmail</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  name: </span><span style="color:#0A3069;">&quot;foo&quot;</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  email: </span><span style="color:#0A3069;">&quot;foo@gmail.com&quot;</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">} </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#953800;">UserWithEmail</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span></code></pre></div></li><li><p>父类型不可以赋值给子类型，即向下转换（downcast），但在 Typescirpt 还是存在一些特例情况：</p><p>any 类型可赋值给任意子类型，any 类型的存在是为了作为 Typescript 逃到 JavaScript 世界的后门</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> any</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> num</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> any;</span></span>\n<span class="line"></span></code></pre></div><p>实践的时候更多推荐使用 unknown，毕竟可以将任意类型的值赋值给 unknown，但 unknown 类型的值只能赋值给 unknown 或 any</p></li></ol><h3 id="函数的协变与逆变" tabindex="-1"><a class="header-anchor" href="#函数的协变与逆变" aria-hidden="true">#</a> 函数的协变与逆变</h3><p>如何比较函数类型？在上面提到的类型层级上的类型比较好像少了函数类型，因为函数类型的比较只在函数与函数之间才有意义。如果放到类型层级，你可以把函数当作一个对象类型，在 JavaScript 中函数本质上是一个对象，况且 TypeScript 是在 JavaScript 之上进行的类型扩展。</p><p>对于函数类型比较，实际上我们要比较的即是参数类型与返回值类型。在 Typescript 配置中 <code>strictFunctionTypes</code> 默认开启的情况下，函数参数类型必须是<strong>逆变</strong>，返回类型则是<strong>协变</strong>，否则采用双变。</p><ul><li>逆变：接受<code>supertype</code>但不接受<code>subtype</code></li><li>协变：接受<code>subtype</code>但不接受<code>supertype</code></li><li>双变：同时接受<code>subtype</code>和<code>supertype</code></li></ul><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Animal</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">doAnimalThing</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;I am a Animal!&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Animal</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">doDogThing</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;I am a Dog!&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Corgi</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Dog</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">doCorgiThing</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;I am a Corgi!&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">t</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> (</span><span style="color:#953800;">d</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">a</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Animal</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Corgi</span><span style="color:#24292F;">();</span></span>\n<span class="line"></span></code></pre></div><p><img src="'+t+'" alt="图 2"></p><p>实践推荐：使用 TypeScript 的 strictFunctionTypes 选项。并且它只对函数属性的正确类型检查。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">//  method 声明，接受双变</span></span>\n<span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">T1</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#24292F;">(</span><span style="color:#953800;">arg</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">// property 声明，参数逆变、返回值协变</span></span>\n<span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">T2</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> (</span><span style="color:#953800;">arg</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#24292F;">(</span><span style="color:#953800;">d</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">TT</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> (</span><span style="color:#953800;">d</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dog</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">tt</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#24292F;">: (</span><span style="color:#953800;">a</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Corgi</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Corgi</span><span style="color:#24292F;">(), </span><span style="color:#6E7781;">// 双变</span></span>\n<span class="line"><span style="color:#24292F;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">ttt</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">TT</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">func</span><span style="color:#24292F;">: (</span><span style="color:#953800;">a</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Corgi</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Corgi</span><span style="color:#24292F;">(), </span><span style="color:#6E7781;">// 报错，只接受参数逆变</span></span>\n<span class="line"><span style="color:#24292F;">};</span></span>\n<span class="line"></span></code></pre></div><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考" aria-hidden="true">#</a> 学习参考</h2>',55),y={href:"https://juejin.cn/book/7086408430491172901",target:"_blank",rel:"noopener noreferrer"},F=(0,l.Uk)("TypeScript 全面进阶指南"),i={href:"https://www.zhenghao.io/posts/type-hierarchy-tree#the-bottom-of-the-tree",target:"_blank",rel:"noopener noreferrer"},E=(0,l.Uk)("The Type Hierarchy Tree"),C={href:"https://dev.to/codeoz/how-i-understand-covariance-contravariance-in-typescript-2766",target:"_blank",rel:"noopener noreferrer"},u=(0,l.Uk)("How I understand Covariance & Contravariance in typescript"),d={},f=(0,a(3860).Z)(d,[["render",function(s,n){const a=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)("div",null,[r,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("a",y,[F,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",i,[E,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",C,[u,(0,l.Wm)(a)])])])])}]])},3860:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);