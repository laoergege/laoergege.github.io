"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[4764],{2430:(l,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-8b5f7690",path:"/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AWebAPI/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html",title:"消息队列和事件循环系统",lang:"zh-CN",frontmatter:{release:!0,tags:["事件循环","浏览器原理"],desc:"总结浏览器事件循环的心智模型及要点。"},excerpt:"",headers:[{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:165625254e4,updatedTime:165625254e4,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:1}]}}},7920:(l,e,n)=>{n.r(e),n.d(e,{default:()=>G});var s=n(5393);const a=n.p+"assets/img/1645524610613.adec855a.png",r=n.p+"assets/img/1645541022331.5b029930.png",t=(0,s._)("h1",{id:"消息队列和事件循环系统",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#消息队列和事件循环系统","aria-hidden":"true"},"#"),(0,s.Uk)(" 消息队列和事件循环系统")],-1),o=(0,s._)("blockquote",null,[(0,s._)("p",null,"网上对事件循环介绍的文章太多了，本文笔者只总结浏览器事件循环的心智模型及要点")],-1),i=(0,s.uE)("<li><p>事件循环系统是 HTML 标准定义的，用户代理实现，而不是 JavaScript 引擎提供的，JavaScript 引擎只是等待用户代理分发 JS 任务</p></li><li><p>事件循环系统的本质是一个单线程协调各类事件任务的模型机制</p><blockquote><p>为了防止资源竞争，在 Chrome 中每个渲染进程只有一个主执线程，主执行线循环不断得各类事件，比如处理 DOM 构建、计算样式、处理布局，同时还需要处理 JavaScript 任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是消息队列和事件循环系统。</p></blockquote></li><li><p>消息队列分为<strong>宏任务队列</strong>和<strong>微任务队列</strong>两种类型队列</p></li><li><p>宏任务队列就是宿主环境协调的各类事件的队列，微任务队列就是 JavaScript 引擎内部执行的任务队列</p></li>",4),p=(0,s._)("p",null,"宏任务类型",-1),u=(0,s._)("li",null,"脚本 script 任务",-1),c=(0,s._)("li",null,"用户输入事件处理",-1),_=(0,s._)("li",null,"UI 渲染任务（DOM、Style、Layout、Paint、Composite）",-1),m=(0,s._)("li",null,"网络请求 ajax、fetch",-1),E=(0,s.Uk)("计时器 setTimeout、setInterval "),k=(0,s._)("li",null,[(0,s.Uk)("计时器的回调不一定在指定时间后能执行。而是在"),(0,s._)("strong",null,"指定时间后，将回调函数放入事件循环的队列中"),(0,s.Uk)("，如果当前任务执行时间过久，会影响定时器任务的执行")],-1),h=(0,s._)("li",null,"每个 setTimeout 产生的任务会直接 push 到任务队列中；而 setInterval 在每次把任务 push 到任务队列前，都要进行一下判断(看上次的任务是否仍在队列中，如果有则不添加，没有则添加)。",-1),d=(0,s.Uk)("setTimeout "),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%AE%9E%E9%99%85%E5%BB%B6%E6%97%B6%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%80%BC%E6%9B%B4%E4%B9%85%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4",target:"_blank",rel:"noopener noreferrer"},f=(0,s.Uk)("setTimeout()/setInterval() 会有嵌套延时的情况，最小间隔是 4ms，在 Chrome 和 Firefox 中第 5 次嵌套调用时就会触发"),F=(0,s._)("li",null,"未激活的页面，setTimeout 执行最小间隔是 1000 毫秒",-1),y=(0,s._)("li",null,"延时执行时间有最大值 大约 24.8 天",-1),B=(0,s.Uk)("MessageChannel、postMessage "),b={href:"https://dbaron.org/log/20100309-faster-timeouts",target:"_blank",rel:"noopener noreferrer"},U=(0,s.Uk)("实现一个比"),A=(0,s._)("code",null,"setTimeout(fn, 0)",-1),C=(0,s.Uk)("零延迟的定时器"),v=(0,s._)("li",null,[(0,s.Uk)("requestAnimationFrame "),(0,s._)("ul",null,[(0,s._)("li",null,"由系统 VSync 信号触发调度，在每一帧渲染之前执行"),(0,s._)("li",null,[(0,s.Uk)("当显示器将一帧画面绘制完成后，并在准备读取下一帧之前，显示器会发出一个垂直同步信号（vertical synchronization）给 GPU，简称 VSync "),(0,s._)("img",{src:"images/1655015455487.png",alt:"图 4"})]),(0,s._)("li",null,"如果页面未激活的话，requestAnimationFrame 也会停止渲染，这样既可以保证页面的流畅性，又能节省主线程执行函数的开销")])],-1),q=(0,s._)("li",null,[(0,s.Uk)("requestIdleCallback "),(0,s._)("ul",null,[(0,s._)("li",null,"在“浏览器重排/重绘”后如果当前帧还有空余时间时被调用的"),(0,s._)("li",null,"可以设置超时强制")])],-1),T=(0,s._)("li",null,"GC",-1),x=(0,s.uE)('<li><p>微任务</p><ul><li>promise.then、promise.catch、promise.finally</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li><li><p>心智模型</p><ol><li>主线程从宏任务队列取一任务执行执行完后</li><li>再循环执行完微任务队列里的所有任务</li><li>UI 渲染判断</li><li>重回到 1</li></ol><p><img src="'+a+'" alt="图 2"></p><p>心智代码：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> task </span><span style="color:#CF222E;">of</span><span style="color:#24292F;"> macroQueue) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">task</span><span style="color:#24292F;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> microTask </span><span style="color:#CF222E;">of</span><span style="color:#24292F;"> microQueue) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">microTask</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p>在每一次的事件循环最后不一定会执行渲染，除非任务里发生重排重绘操作，而且多次操作可能被积累起来只做一次渲染</p></li><li><p>宏任务队列实际在浏览器实现中并不是单个消息队列而是多消息队列架构，而微任务队列只有一个队列</p></li>',4),S=(0,s.Uk)("Blink 任务调度，参考"),w={href:"https://docs.google.com/presentation/d/1V09Qq08_jOucvOFs-C7P4Hz2Vsswa6imqLxAf7ONomQ/edit#slide=id.g3f2d525d4_116",target:"_blank",rel:"noopener noreferrer"},I=(0,s.Uk)("《BlinkOn Scheduler Presentation 》"),O=(0,s.Uk)("，总结如下"),W=(0,s._)("ul",null,[(0,s._)("li",null,"按照任务类型分组任务队列"),(0,s._)("li",null,[(0,s.Uk)("基于不同的场景来动态调整消息队列的优先级 "),(0,s._)("img",{src:r,alt:"图 3"})]),(0,s._)("li",null,"设置队列权重：如果连续执行了一定个数的高优先级的任务，那么中间会执行一次低优先级的任务，这样就缓解了任务饿死的情况")],-1),J=(0,s._)("h2",{id:"参考",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),(0,s.Uk)(" 参考")],-1),M={href:"https://mp.weixin.qq.com/s/q_5c4wzsxOHiqHlPfqarzQ",target:"_blank",rel:"noopener noreferrer"},P=(0,s.Uk)("JavaScript 事件循环：从起源到浏览器再到 Node.js"),z={href:"https://www.youtube.com/watch?v=cCOL7MC4Pl0",target:"_blank",rel:"noopener noreferrer"},j=(0,s.Uk)("Jake Archibald: 在循环 - JSConf.Asia"),D={href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"},L=(0,s.Uk)("Tasks, microtasks, queues and schedules"),Q={href:"https://segmentfault.com/a/1190000038829248",target:"_blank",rel:"noopener noreferrer"},H=(0,s.Uk)("为什么要用 setTimeout 模拟 setInterval ？"),N=(0,s._)("li",null,"极客时间《浏览器工作原理与实践》",-1),V={},G=(0,n(3860).Z)(V,[["render",function(l,e){const n=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[t,o,(0,s._)("ol",null,[i,(0,s._)("li",null,[p,(0,s._)("ul",null,[u,c,_,m,(0,s._)("li",null,[E,(0,s._)("ul",null,[k,h,(0,s._)("li",null,[d,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",g,[f,(0,s.Wm)(n)])]),F,y])])])]),(0,s._)("li",null,[B,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",b,[U,A,C,(0,s.Wm)(n)])])])]),v,q,T])]),x,(0,s._)("li",null,[(0,s._)("p",null,[S,(0,s._)("a",w,[I,(0,s.Wm)(n)]),O])])]),W,J,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",M,[P,(0,s.Wm)(n)])]),(0,s._)("li",null,[(0,s._)("a",z,[j,(0,s.Wm)(n)])]),(0,s._)("li",null,[(0,s._)("a",D,[L,(0,s.Wm)(n)])]),(0,s._)("li",null,[(0,s._)("a",Q,[H,(0,s.Wm)(n)])]),N])])}]])},3860:(l,e)=>{e.Z=(l,e)=>{const n=l.__vccOpts||l;for(const[l,s]of e)n[l]=s;return n}}}]);