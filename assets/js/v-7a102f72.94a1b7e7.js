"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[4154],{2175:(l,i,e)=>{e.r(i),e.d(i,{data:()=>r});const r={key:"v-7a102f72",path:"/JavaScript/JavaScript%20%E6%95%B0%E7%BB%84%20API%20%E6%80%BB%E7%BB%93.html",title:"数组API总结",lang:"zh-CN",frontmatter:{release:!0,tags:["js","数组"],desc:"数组方法总结"},excerpt:"",headers:[],git:{createdTime:1638802865e3,updatedTime:164787644e4,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:4}]}}},4201:(l,i,e)=>{e.r(i),e.d(i,{default:()=>a});var r=e(5393);const t=[(0,r.uE)('<h1 id="数组api总结" tabindex="-1"><a class="header-anchor" href="#数组api总结" aria-hidden="true">#</a> 数组API总结</h1><ul><li>数组构造 <ul><li>构造器 <ul><li><code>new Array(arg1, arg2,…)</code></li><li>new Array(len)</li></ul></li><li>字面量</li><li>es6 静态方法 <ul><li>Array.of</li><li>Array.from（Array.from 方法对一个<strong>类数组对象</strong>或<strong>可迭代对象</strong>创建一个新的，浅拷贝的数组实例）</li></ul></li></ul></li><li>类数组 <ul><li>带有 <code>length</code> 属性的对象</li><li>类数组转换数组 <ul><li>Array.from</li><li>使用<strong>类数组借用数组方法转数组</strong>特点 <ul><li><code>Array.prototype.slice.call(likeArray)</code></li><li><code>Array.prototype.concat.apply([], likeArray)</code></li><li><code>Array.apply(null, likeArray)</code></li></ul></li></ul></li></ul></li><li>数组类型判断 <ul><li>xxx instanceof Array</li><li>Object.prototype.toString.call(xxx)</li><li>Array.isArray</li></ul></li><li>api <blockquote><p>💡 可根据“是否改动到内部元素位置”去判断一个方法是否会改变数组自身</p></blockquote><ul><li>改变自身的方法 <ul><li>pop</li><li>push</li><li>reverse</li><li>shift</li><li>sort <ul><li>默认排序顺序是先将元素转换为字符串，按照转换为字符串的各个字符的 Unicode 位点进行排序</li><li><code>a-b&gt;0</code>，倒序</li><li><code>a-b&lt;0</code>，正序</li><li><code>a-b=0</code>，不变</li></ul></li><li><strong>splice</strong></li><li>unshift</li><li>copyWithin</li><li><strong>fill(value[, start[, end]])</strong>，填充替换数组元素</li><li><strong>flat([depth])</strong><ul><li>使用 Infinity，可展开任意深度的嵌套数组</li></ul></li><li>flatMap</li></ul></li><li>不改变自身的方法 <ul><li><strong>concat</strong><ul><li>参数：数组或参数列表</li></ul></li><li>join</li><li><strong>slice([begin[, end]])</strong>，提取原数组中索引从 begin 到 end 的所有元素 <ul><li>begin 可选，默认 0 ，包含在结果集中 <ul><li>负数，则表示从原数组中的倒数第几个元素开始提取</li></ul></li><li>end 可选，不会被包含在结果集中</li></ul></li></ul></li><li>遍历 <ul><li>forEach</li><li>条件查找 <ul><li>indexOf</li><li>lastIndexOf</li><li>includes</li><li>every</li><li>some</li><li>find</li><li>findIndex</li></ul></li><li>转换 <ul><li>entries</li><li>keys</li><li>values</li><li>filter</li><li>map</li><li><strong>reduce(previousValue, currentValue, currentIndex, array)</strong></li><li><strong>reduceRight</strong></li></ul></li></ul></li></ul></li></ul>',2)],o={},a=(0,e(3860).Z)(o,[["render",function(l,i){return(0,r.wg)(),(0,r.iD)("div",null,t)}]])},3860:(l,i)=>{i.Z=(l,i)=>{const e=l.__vccOpts||l;for(const[l,r]of i)e[l]=r;return e}}}]);