"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[4057],{398:(e,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-d99bba28",path:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8F%8AHTTP/http%20%E5%90%84%E7%89%88%E6%9C%AC%E5%8D%8F%E8%AE%AE%E5%AF%B9%E6%AF%94.html",title:"HTTP 各版本协议对比",lang:"zh-CN",frontmatter:{release:!0,tags:["http"],desc:"了解 HTTP 各版本的关键设计变化以及每个变化背后的动机"},excerpt:"",headers:[{level:2,title:"keep-alive 长连接",slug:"keep-alive-长连接",children:[]},{level:2,title:"管道(pipelining)",slug:"管道-pipelining",children:[]},{level:2,title:"http 队头阻塞",slug:"http-队头阻塞",children:[]},{level:2,title:"头部压缩",slug:"头部压缩",children:[]},{level:2,title:"二进制分帧",slug:"二进制分帧",children:[]},{level:2,title:"多路复用",slug:"多路复用",children:[]},{level:2,title:"服务器推送",slug:"服务器推送",children:[]},{level:2,title:"TCP 队头阻塞",slug:"tcp-队头阻塞",children:[]},{level:2,title:"HTTP/3：基于 UDP 实现的 QUIC 协议",slug:"http-3-基于-udp-实现的-quic-协议",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1664433214e3,updatedTime:1664433214e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:1}]}}},6153:(e,l,i)=>{i.r(l),i.d(l,{default:()=>x});var a=i(5393);const t=i.p+"assets/img/750369eee85b600041095ba4e0c153ee9f146e2118e99caaa5bad96bc5702cb1.e250ddbe.png",r=i.p+"assets/img/a0bcce54c1f34281df9e345b474b0dfd0bfb939318933a4529dca34e12ac4b6c.e604a32c.png",p=i.p+"assets/img/1649336333237.d1b48b45.png",h=i.p+"assets/img/21eeea004e945f9c27eede678a686d7137192c66f916bafb1c5fe2caab24c90c.111e1e4a.png",n=i.p+"assets/img/1649176543339.405d69b9.png",s=i.p+"assets/img/1649175617174.6e8184f5.png",c=i.p+"assets/img/binary_framing_layer01.a0117cf1.svg",d=i.p+"assets/img/b631c1a3b6db5767ed5e6bbd85155934dad4aa978a94d0da959efe9756a5c473.d1bc1e49.png",T=i.p+"assets/img/43efe9a0eb0235d9d6510f524a67913eef49c5f0baefb56a125d34ccc3e31cb9.df44cc53.png",o=i.p+"assets/img/push01.98173dde.svg",u=i.p+"assets/img/1649325116482.f0e2e352.png",E=i.p+"assets/img/1649339218549.19679ae8.png",g=(0,a.uE)('<h1 id="http-各版本协议对比" tabindex="-1"><a class="header-anchor" href="#http-各版本协议对比" aria-hidden="true">#</a> HTTP 各版本协议对比</h1><ul><li>HTTP/0.9 <ul><li>只传输 ASCII 编码的超文本内容 HTML，并且只有一个请求行且只支持GET请求</li></ul></li><li>HTTP/1.0 <ul><li>增加了 HEAD、POST 等新方法；</li><li>增加了响应状态码；</li><li>引入了 HTTP Header（头部）的概念，让 HTTP 处理请求和响应更加灵活；</li><li>支持多种文件类型传输</li></ul></li><li>HTTP/1.1 <ul><li>增加了 PUT、DELETE、OPTIONS、PATCH 等新的方法</li><li>支持响应数据分块传输</li><li>增加了 cache-control</li><li>增加了 cookie 机制</li><li><a href="#keep-alive-%E9%95%BF%E8%BF%9E%E6%8E%A5">默认开启 keep-alive 长连接</a></li><li><a href="#%E7%AE%A1%E9%81%93pipelining">引入管道机制</a></li></ul></li><li>HTTP/2：改进性能，解决了 <a href="#http-%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E">HTTP 队头阻塞问题</a><ul><li><a href="#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9">头部压缩</a></li><li><a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7">二进制分帧传输</a></li><li><a href="#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">多路复用</a><ul><li>流 <ul><li>唯一 ID</li><li>优先级及依赖关系</li><li>双向性</li></ul></li></ul></li><li>帧控制</li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81">服务推送</a></li></ul></li><li><a href="#http3%E5%9F%BA%E4%BA%8E-udp-%E5%AE%9E%E7%8E%B0%E7%9A%84-quic-%E5%8D%8F%E8%AE%AE">HTTP/3</a>：主要解决 <a href="#tcp-%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E">TCP 队头阻塞</a>、TCP 及 TSL 握手消耗 <ul><li>基于 UDP 实现的 QUIC 协议</li></ul></li></ul><h2 id="keep-alive-长连接" tabindex="-1"><a class="header-anchor" href="#keep-alive-长连接" aria-hidden="true">#</a> keep-alive 长连接</h2><p>在 HTTP/1.1 之前，客户端与服务器端的的<strong>每次请求都需要创建 TCP 连接，服务器响应后断开 TCP 连接</strong>，再请求再创建断开。因为客户端不会与服务器保持长时间的连接状态，所以就被称为“短连接”（short-lived connections）。</p><p><img src="'+t+'" alt="图 1"></p><p>TCP 的连接和关闭非常耗时间，<strong>长连接即在一个请求结束后保持 TCP 连接不关闭</strong>，其他多个请求可以复用到同一 TCP 连接。</p><p><img src="'+r+'" alt="图 5"></p><h2 id="管道-pipelining" tabindex="-1"><a class="header-anchor" href="#管道-pipelining" aria-hidden="true">#</a> 管道(pipelining)</h2><p>在一个 TCP 连接可以同时发送多个请求，但要求服务端必须按照请求发送的顺序返回响应，当顺序请求多个文件时，其中一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞。管道解决了请求的队头阻塞，而不是响应的队头阻塞，这是因为 http 队头阻塞的问题。管道机制依旧没解决队头阻塞问题，而且大多数浏览器实际上并没有在现实中使用 HTTP/1.1 管道。</p><p><img src="'+p+'" alt="图 29"></p><h2 id="http-队头阻塞" tabindex="-1"><a class="header-anchor" href="#http-队头阻塞" aria-hidden="true">#</a> http 队头阻塞</h2><p>http 队头阻塞，设计之初是一个简单纯文本传输协议，基本上是一个字符流，消息必须作为一个连续的数据流完整地发送，并且连接不能用于其他任何事情，只能传输该消息直到它完成，这造就了 http 是一个请求-应答模式。</p><p>即使是使用了长连接，但在同一条 TCP 连接中，由于 http 的请求应答模式，决定了 http 是“半双工”，只能一发一回收发数据，队列后边的请求必须等待队首完成，如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，这就是 http 队头阻塞的根源。</p><p><img src="'+h+'" alt="图 4"></p><h2 id="头部压缩" tabindex="-1"><a class="header-anchor" href="#头部压缩" aria-hidden="true">#</a> 头部压缩</h2><p>http 请求头可能带有很多字段或者每次传输重复字段都会导致带宽浪费，HTTP/2 使用 “HPACK” 算法进行“头部压缩”：</p><ol><li>浏览器和服务器会维护一个相同的静态表和一个动态表，以及内置一个静态霍夫曼编码表</li><li>静态表存储的是常见的一些头部，和一些很常见的头部键值对 <img src="'+n+'" alt="图 27"></li><li>动态表初始为空，添加在静态表后面，结构相同</li><li>请求、响应头部中对于静态表里未出现过的字段或者对应值则经过哈夫曼压缩编码发送之后，客户端和服务器更新自己的动态表；对应已有的则只需发送索引值 <img src="'+s+'" alt="图 26"></li></ol>',17),P={href:"https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-header-compression#appendix-A",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("静态表、静态霍夫曼编码表参考"),b=(0,a.uE)('<h2 id="二进制分帧" tabindex="-1"><a class="header-anchor" href="#二进制分帧" aria-hidden="true">#</a> 二进制分帧</h2><p><img src="'+c+'" alt="图 24"></p><p>二进制分帧层是在应用层和传输层之间的中间层，HTTP/2 采用了类似于 TCP 数据包二进制结构，将数据分割成多个数据帧（DATA frames），并对其进行二进制结构化编码，并且每个帧都分配给一个唯一“流” ID。</p><p><img src="'+d+'" alt="图 6"></p><ul><li>帧类型 <ul><li>数据帧 <ul><li>HEADERS 帧</li><li>DATA 帧</li></ul></li><li>控制帧 <ul><li>SETTINGS、PING、PRIORITY 等则是用来管理流的控制帧。</li></ul></li></ul></li><li>帧标志：携带简单的控制信息 <ul><li>END_HEADERS：表示头数据结束，相当于 HTTP/1 里头后的空行（“\\r\\n”）</li><li>END_STREAM：表示单方向数据发送结束（即 EOS，End of Stream）</li></ul></li><li>流标识符：帧所属的“流”，接收方使用它就可以从乱序的帧里识别出具有相同流 ID 的帧序列，按顺序组装起来就实现了虚拟的“流”</li></ul><h2 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用" aria-hidden="true">#</a> 多路复用</h2><p>每个帧都分配给一个“流”：这里的“流”，其实是一个虚拟的概念，在同一个 TCP 连接中所有消息都是被分成多个帧乱序发送，每条“流”其实可以看作是每个 http 请求，属于同一个 http 请求的消息往返的帧会分配一个唯一的流 ID，将同一个流ID的帧按照次序组装起来就是 HTTP/1 里的请求报文和响应报文。</p><p><img src="'+T+'" alt="图 7"></p><p>http2 就可以在一个 TCP 同时发送接受多个请求“碎片化”的消息，这就是常说的“多路复用”（ Multiplexing）——多个往返通信都复用一个连接来处理。</p><h2 id="服务器推送" tabindex="-1"><a class="header-anchor" href="#服务器推送" aria-hidden="true">#</a> 服务器推送</h2><p>http2 保留了应用层 http “请求 - 响应答” 语义，是为了兼容保证上层应用继续工作， 但底层不再 “请求 - 响答” 的工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。比如，在浏览器刚请求 HTML 的时候就提前把可能会用到的 JS、CSS 文件发给客户端，减少等待的延迟，这被称为“服务器推送”（Server Push，也叫 Cache Push）。</p><p><img src="'+o+'" alt="图 25"></p><h2 id="tcp-队头阻塞" tabindex="-1"><a class="header-anchor" href="#tcp-队头阻塞" aria-hidden="true">#</a> TCP 队头阻塞</h2><p>底层 TCP 对于协议上层传输什么类型文件数据是无感的，而且也不存在 http2 的流概念，它只知道处理一系列字节，把所有的东西看作一个大流，从一台计算机传输另一台计算机。</p><p><img src="'+u+'" alt="图 28"></p><p>当接受到数据包1、3，而数据包2丢失时，TCP 会缓冲数据包3，直到收到重新传输丢失数据包2，数据包3才可用，这相当于间接阻塞上层 http2 的流1流2。</p><p>总结，如果一个 TCP 包丢失，所有后续的包都需要等待它的重传，TCP 具有传输层队头阻塞。</p><h2 id="http-3-基于-udp-实现的-quic-协议" tabindex="-1"><a class="header-anchor" href="#http-3-基于-udp-实现的-quic-协议" aria-hidden="true">#</a> HTTP/3：基于 UDP 实现的 QUIC 协议</h2><p>HTTP/2 是基于 TCP，这就意味 TCP 队头阻塞问题也是同样无可避免。在 HTTP/2 中以流的方式实现了多路复用解决队头阻塞问题，同样可以在传输层上实现多条独立的流即可。但由于不可能改变 TCP 协议本身使其具有流意识，所以需要实现一个全新的传输层协议 QUIC。</p><p><img src="'+E+'" alt="图 30"></p><p>QUIC = 实现 TCP 的所有特性（可靠性、拥塞控制、流量控制、排序等） + TSL + 多路复用</p><ul><li>实现了类似 TCP 的流量控制、传输可靠性的功能</li><li>集成了 TLS 加密功能</li><li>实现了 HTTP/2 中的多路复用功能</li><li>0-RTT 快速握手功能。由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。</li></ul><blockquote><p>我们把从浏览器发送一个数据包到服务器，再从服务器返回数据包到浏览器的整个往返时间称为 RTT。RTT 是反映网络性能的一个重要指标。</p></blockquote><p>QUIC 的多路复用对队头阻塞的移除可能只会对有大量数据包丢失的网络场景有效，但大多数正常情况对 Web 性能起不到多大作用。多路复用允许改变响应的顺序并中断低优先级响应以获得更高优先级的响应。</p><p>因为资源多路复用通常不是 Web 性能的最佳方案</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',26),C={href:"https://hpbn.co/http2/",target:"_blank",rel:"noopener noreferrer"},m=(0,a.Uk)("HTTP/2"),A={href:"https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2_Header-Compression.md#3-indexing-tables",target:"_blank",rel:"noopener noreferrer"},H=(0,a.Uk)("详解 HTTP/2 头压缩算法 —— HPACK"),k={href:"https://stackoverflow.com/questions/58498116/why-is-it-said-that-http2-is-a-binary-protocol",target:"_blank",rel:"noopener noreferrer"},_=(0,a.Uk)("Why is it said that HTTP2 is a binary protocol?"),U={href:"https://mp.weixin.qq.com/s/-Z5ei-zXMfjPHUrQZs87ag",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("QUIC 和 HTTP/3 队头阻塞的细节"),D={href:"https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/#sec_http2",target:"_blank",rel:"noopener noreferrer"},B=(0,a.Uk)("Head-of-Line Blocking in QUIC and HTTP/3: The Details"),I=(0,a.uE)("<p>http2.0允许服务器主动推送消息，那跟WebSocket有什么区别吗？</p><ul><li><p>tcp</p><ul><li>启动慢</li><li>拥塞控制</li><li>重传机制</li></ul></li><li><p>http1</p><ul><li>keep-alive</li><li>文件合并</li><li>并行连接 <ul><li>域名分片:浏览器为每个域名最多同时维护 6 个 TCP 持久连接；</li></ul></li></ul></li></ul><p>QUIC 协议为什么选择 UDP</p><p>因为 UDP 是无序的，包之间没有依赖关系，所以就从根本上解决了“队头阻塞”。</p><p>UDP 是一个简单、不可靠的传输协议</p><p>QUIC 中的 0-RTT 功能能让客户端在三次握手完成之前发送应用数据。这个功能通过重用先前连接的参数实现。0-RTT 依赖于客户端记住的重要参数，并向服务器提供 TLS 会话票证（session ticket）以恢复相同的信息。</p>",6),S={},x=(0,i(3860).Z)(S,[["render",function(e,l){const i=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[g,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",P,[f,(0,a.Wm)(i)])])]),b,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",C,[m,(0,a.Wm)(i)])]),(0,a._)("li",null,[(0,a._)("a",A,[H,(0,a.Wm)(i)])]),(0,a._)("li",null,[(0,a._)("a",k,[_,(0,a.Wm)(i)])]),(0,a._)("li",null,[(0,a._)("a",U,[v,(0,a.Wm)(i)])]),(0,a._)("li",null,[(0,a._)("a",D,[B,(0,a.Wm)(i)])])]),I])}]])},3860:(e,l)=>{l.Z=(e,l)=>{const i=e.__vccOpts||e;for(const[e,a]of l)i[e]=a;return i}}}]);