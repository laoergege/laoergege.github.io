"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[4773],{5193:(a,e,s)=>{s.r(e),s.d(e,{data:()=>l});const l={key:"v-631fc68a",path:"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E5%A0%86.html",title:"树和二叉树、二叉堆",lang:"zh-CN",frontmatter:{release:!0,tags:["数据结构","二叉树","堆"]},excerpt:"",headers:[{level:2,title:"树",slug:"树",children:[{level:3,title:"树的遍历",slug:"树的遍历",children:[]},{level:3,title:"二叉树、满二叉树、完全二叉树（重点）、二叉搜索树（重点）",slug:"二叉树、满二叉树、完全二叉树-重点-、二叉搜索树-重点",children:[]}]},{level:2,title:"堆",slug:"堆",children:[{level:3,title:"二叉堆",slug:"二叉堆",children:[]}]}],git:{createdTime:1650864337e3,updatedTime:1650864337e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:1}]}}},8874:(a,e,s)=>{s.r(e),s.d(e,{default:()=>E});var l=s(5393);const n=s.p+"assets/img/45d2a8a38a4a2e6a46553bdce2004d75f1d5ca4ce8ec1a4197243096be75dd04.37bd97f4.png",p=s.p+"assets/img/d0428ba3187446a9c66567768e1697e8ff0272905f82d48fbfd850f652539670.dea3a977.png",r=s.p+"assets/img/263550a15f5d18704dc83528bf8b04c497e3103816cd9a34b6ecd82e5f65236a.15e419e4.png",i=s.p+"assets/img/98d7760955d43b3c5e4fc452ce4c6f992399288a7d24f14bed254f04b54e23ca.64517c66.png",c=s.p+"assets/img/e3eec1c063c23dc4da6ea04e18cc8fd73c50e61b3a91873e555f9f90692bbe98.832dfbbe.png",t=s.p+"assets/img/image-20210601104831064.ef0a47a9.png",o=s.p+"assets/img/image-20210601114717065.3b6a58c6.png",d=s.p+"assets/img/image-20210601114734119.cabb36a8.png",h=(0,l.uE)('<h1 id="树和二叉树、二叉堆" tabindex="-1"><a class="header-anchor" href="#树和二叉树、二叉堆" aria-hidden="true">#</a> 树和二叉树、二叉堆</h1><h2 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h2><p>树是由结点和边组成的，自顶而下，不存在环的一种数据结构。</p><p><img src="'+n+'" alt="图 3"></p><p>特性：根、子节点、深度（树中结点的最大层次数，就是这棵树的树深）</p><p><img src="'+p+'" alt="图 4"></p><h3 id="树的遍历" tabindex="-1"><a class="header-anchor" href="#树的遍历" aria-hidden="true">#</a> 树的遍历</h3><ul><li>前序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层序遍历</li></ul><p>这里的序指的是父结点的遍历顺序，前序就是先遍历父结点，中序就是中间遍历父结点，后序就是最后遍历父结点。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">traverse</span><span style="color:#24292F;">(</span><span style="color:#953800;">TreeNode</span><span style="color:#24292F;"> </span><span style="color:#953800;">root</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 前序遍历代码位置</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">traverse</span><span style="color:#24292F;">(root.left);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 中序遍历代码位置</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">traverse</span><span style="color:#24292F;">(root.right);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 后序遍历代码位置</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>层序遍历</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> queue </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> [root]</span></span>\n<span class="line"><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (queue.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="二叉树、满二叉树、完全二叉树-重点-、二叉搜索树-重点" tabindex="-1"><a class="header-anchor" href="#二叉树、满二叉树、完全二叉树-重点-、二叉搜索树-重点" aria-hidden="true">#</a> 二叉树、满二叉树、完全二叉树（重点）、二叉搜索树（重点）</h3><h4 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h4><p>每个结点最多有两个子结点，分别称作左子结点和右子结点。</p><h4 id="满二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a> 满二叉树</h4><p>只有最后一层无任何子结点，其他所有层上的所有结点都有两个子结点的二叉树。</p><h4 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h4><p>除了最后一层以外，其他层的结点个数都达到最大，并且最后一层的叶子结点都靠左排列。</p><p><img src="'+r+'" alt="图 5"></p><p>完全二叉树的由来，主要是跟“非完全二叉树”的树结构以及对应的存储结构做对比</p><p><img src="'+i+'" alt="图 7"></p><p>完全二叉树上节点对应的索引刚好可以完全落应在数组上。</p><p>为了方便计算，i 从 1 开始。结构特点：</p><ul><li>索引为i的左孩子的索引是 2i</li><li>索引为i的左孩子的索引是 2i+1</li><li>索引为i的父结点的索引是 Math.floor(i/2)</li></ul><h4 id="非完全二叉树" tabindex="-1"><a class="header-anchor" href="#非完全二叉树" aria-hidden="true">#</a> 非完全二叉树</h4><p>非完全二叉树，树的中间结构上是不完全的，导致在数组上存储是有浪费的。</p><p><img src="'+c+'" alt="图 6"></p><h4 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h4><ul><li>左子树中的每个结点的值都小于父结点</li><li>右子树中的每个结点的值都大于父结点</li><li>对二叉查找树进行中序遍历，就可以输出一个从小到大的有序数据队列</li><li>查找操作，普通二叉树复杂度 O(n)，二叉查找树则是 O(logn)</li></ul><h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h2><p>堆是一种特殊的<strong>基于树</strong>的数据结构，一种称为优先级队列的抽象数据类型的实现。<br> 堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。</p>',32),g={href:"https://www.zhihu.com/question/36134980/answer/87490177",target:"_blank",rel:"noopener noreferrer"},f=(0,l.Uk)("堆和树有什么区别？堆为什么要叫堆，不叫树呢？ - Severus的回答 - 知乎"),u=(0,l.uE)('<p><img src="'+t+'" alt="image-20210601104831064"></p><p>堆应用：</p><ul><li>优先队列（优先级队列是一种特殊的队列，优先级高的数据先出队，而不再像普通的队列那样，先进先出）</li><li>Top K 问题 <blockquote><p>建堆后，如果元素比堆顶元素大，我们就把堆顶元素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理。</p></blockquote></li><li>中位数 <blockquote><ol><li>排序后分成两部分前后分别为大、小顶堆，大顶堆顶部元素即为中位数</li><li>如果新加入的数据小于等于大顶堆的堆顶元素，我们就将这个新数据插入到大顶堆；否则，我们就将这个新数据插入到小顶堆。</li><li>堆调整 <img src="images/fa81f7ec7b77072e46708bcca91b561d0ff10c873861d314c961f114ed1e7e64.png" alt="图 13"><br> 保证大顶堆的数量为奇（偶）数，小顶堆为偶数</li></ol></blockquote></li></ul><h3 id="二叉堆" tabindex="-1"><a class="header-anchor" href="#二叉堆" aria-hidden="true">#</a> 二叉堆</h3><p>基于<strong>完全二叉树</strong>性质的数据结构，一般使用数组存储。</p><p><a href="./%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/binaryHeap.js">js 二叉堆实现</a>。</p><p>一个包含 n 个节点的完全二叉树，树的高度不会超过 log2​n。堆化的过程是顺着节点所在路径比较交换的，所以堆化的时间复杂度跟树的高度成正比，也就是 O(logn)。插入数据和删除堆顶元素的主要逻辑就是堆化，所以，往堆中插入一个元素和删除堆顶元素的时间复杂度都是 O(logn)。</p><p><img src="'+o+'" alt="image-20210601114717065"></p><p><img src="'+d+'" alt="image-20210601114734119"></p>',9),b={},E=(0,s(3860).Z)(b,[["render",function(a,e){const s=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)("div",null,[h,(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l._)("a",g,[f,(0,l.Wm)(s)])])]),u])}]])},3860:(a,e)=>{e.Z=(a,e)=>{const s=a.__vccOpts||a;for(const[a,l]of e)s[a]=l;return s}}}]);