"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[8359],{7778:(l,e,i)=>{i.r(e),i.d(e,{data:()=>a});const a={key:"v-d52c6cc0",path:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8F%8AHTTP/DNS.html",title:"DNS",lang:"zh-CN",frontmatter:{release:!0,tags:["dns","计算机网络"]},excerpt:"",headers:[{level:2,title:"DNS 架构",slug:"dns-架构",children:[]},{level:2,title:"DNS 记录",slug:"dns-记录",children:[]},{level:2,title:"DNS 查询过程",slug:"dns-查询过程",children:[]},{level:2,title:"学习参考",slug:"学习参考",children:[]}],git:{createdTime:1664433214e3,updatedTime:1664433214e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:1}]}}},8988:(l,e,i)=>{i.r(e),i.d(e,{default:()=>p});var a=i(5393);const n=i.p+"assets/img/1645002988051.904eeaff.png",s=i.p+"assets/img/1645023606416.ae9f90f7.png",r=(0,a.uE)('<h1 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h1><ul><li>DNS <ul><li><a href="#dns-%E6%9E%B6%E6%9E%84">DNS 架构</a></li><li><a href="#dns-%E8%AE%B0%E5%BD%95">DNS 记录</a></li><li><a href="#dns-%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B">DNS 查询过程</a></li><li>场景如 <ul><li>基于 DNS 负载均衡</li><li>同一个 IP 地址上运行多个服务</li></ul></li></ul></li></ul><h2 id="dns-架构" tabindex="-1"><a class="header-anchor" href="#dns-架构" aria-hidden="true">#</a> DNS 架构</h2><p>DNS（Domain Name System，域名系统）是一个将域名和 IP 地址相互映射，提供分布式存储查找服务，其核心是一个分层结构：</p><ol><li>根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址；</li><li>顶级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址；</li><li>权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 www.apple.com 的 IP 地址。</li><li><em>本地域名服务器</em></li></ol><p><img src="'+n+'" alt="图 28"></p><h2 id="dns-记录" tabindex="-1"><a class="header-anchor" href="#dns-记录" aria-hidden="true">#</a> DNS 记录</h2><div class="language-text ext-text"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292f;">; 定义www.example.com的ip地址</span></span>\n<span class="line"><span style="color:#24292f;">www.example.com.     IN     A     139.18.28.5;</span></span>\n<span class="line"><span style="color:#24292f;"></span></span></code></pre></div><p><code>www.example.com</code> 是要解析的域名。A 是记录的类型，A 记录代表着这是一条用于解析 IPv4 地址的记录。</p><ul><li>DNS 记录类型 <ul><li>A：IPv4 地址记录</li><li>AAAA：IPv6 地址记录</li><li>CNAME：域名别名，作用是将一个域名映射到另一个域名。 <ul><li>CNAME 记录必须指向另一个域名，而不能是IP地址</li><li>域名解析的时候，如果看到 CNAME 记录，则会从映射目标重新开始查询</li></ul></li><li>MX：邮箱记录</li><li>NS：DNS 服务器记录 <ul><li>NS 记录优先于 A 记录</li></ul></li></ul></li></ul><h2 id="dns-查询过程" tabindex="-1"><a class="header-anchor" href="#dns-查询过程" aria-hidden="true">#</a> DNS 查询过程</h2><p>DNS 查询链路：<br> 浏览器缓存 &gt; 操作系统缓存 &gt; 本地 DNS 服务器（比如网络服务商搭建的 DNS 服务器）&gt; 核心 DNS 服务器（ 根级 DNS &gt; 顶级 DNS &gt; 权威 DNS）</p><p>整条链路中都存在缓存，经过层层的缓存，最终命中根 DNS 服务、顶级 DNS 服务器以及权威 DNS 服务的请求少之又少。</p><p>DNS查询有两种方式：递归和迭代。DNS客户端设置使用的DNS服务器一般都是递归服务器，它负责全权处理客户端的DNS查询请求，直到返回最终结果。而DNS服务器之间一般采用迭代查询方式。</p><p>比如整个的查询过程如下：</p><ol><li>客户端向其本地域名服务器发起域名查询，如果存在记录则直接返回结果</li><li>否则，本地域名服务器代替客户端向根域名服务器发起查询，得到顶级域名服务器的 IP 地址</li><li>本地域名服务器向顶级域名服务器发起查询，得到权威 DNS 服务器的 IP 地址。</li><li>本地域名服务器向权威域名服务器发起查询，得到查询的主机 A 记录。</li><li>本地 DNS 服务器缓存 DNS 记录并返回给客户端</li></ol><p><img src="'+s+'" alt="图 1"></p><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考" aria-hidden="true">#</a> 学习参考</h2>',18),t={href:"https://mp.weixin.qq.com/s/Kur84cigXkiTs3vimS3wQA",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("DNS 查询原理详解"),c=(0,a._)("li",null,"极客《透视 HTTP 协议》",-1),o={},p=(0,i(3860).Z)(o,[["render",function(l,e){const i=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[r,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",t,[d,(0,a.Wm)(i)])]),c])])}]])},3860:(l,e)=>{e.Z=(l,e)=>{const i=l.__vccOpts||l;for(const[l,a]of e)i[l]=a;return i}}}]);