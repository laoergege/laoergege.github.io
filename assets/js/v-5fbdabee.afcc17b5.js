"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[304],{4883:(l,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a={key:"v-5fbdabee",path:"/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AWebAPI/Web%20%E5%AE%89%E5%85%A8.html",title:"Web 安全",lang:"zh-CN",frontmatter:{release:!0,tags:["web","安全"],desc:"总结 Web 安全相关知识体系"},excerpt:"",headers:[{level:2,title:"同源策略",slug:"同源策略",children:[]},{level:2,title:"跨站脚本攻击（XSS）",slug:"跨站脚本攻击-xss",children:[]},{level:2,title:"防止 XSS 攻击",slug:"防止-xss-攻击",children:[{level:3,title:"推荐阅读",slug:"推荐阅读",children:[]}]},{level:2,title:"CSRF 攻击（跨站请求伪造）",slug:"csrf-攻击-跨站请求伪造",children:[{level:3,title:"防止 CSRF 攻击",slug:"防止-csrf-攻击",children:[]}]},{level:2,title:"站点隔离策略",slug:"站点隔离策略",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:165625254e4,updatedTime:1663867943e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:3}]}}},9442:(l,s,n)=>{n.r(s),n.d(s,{default:()=>j});var a=n(5393);const e=n.p+"assets/img/1642869618173.d14d77c8.png",o=n.p+"assets/img/4b690f39c941560efb2f990d09c90d3dda3f0a161c7d2451f47827864f8b1432.40a269cc.png",t=n.p+"assets/img/ae52cbb7f0f0ba754c37fb25c2c5c15767d1477f1d9652263f8ad442d2acb4d7.c0cdf34e.png",p=n.p+"assets/img/1652278383554.d7c02aa9.png",r=n.p+"assets/img/1652278261312.b8e453dc.png",c=(0,a._)("h1",{id:"web-安全",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#web-安全","aria-hidden":"true"},"#"),(0,a.Uk)(" Web 安全")],-1),i=(0,a.Uk)("Web 安全 "),u=(0,a.uE)('<li>页面安全 <ul><li>核心：<a href="#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5">同源策略</a></li><li>同源策略下的“妥协” <ul><li>页面中可以引入第三方资源 <ul><li><a href="#%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBxss">XSS 攻击</a></li><li><a href="#%E9%98%B2%E6%AD%A2-csrf-%E6%94%BB%E5%87%BB">防止 XSS 攻击</a></li></ul></li><li>跨域资源共享（CORS）</li><li>跨文档通信机制（window.postMessage）</li></ul></li><li><a href="#csrf-%E6%94%BB%E5%87%BB%E4%B8%8E-cookie-%E6%9C%BA%E5%88%B6">CSRF 攻击与 cookie 机制</a><ul><li><a href="#%E9%98%B2%E6%AD%A2-csrf-%E6%94%BB%E5%87%BB">防止 CSRF 攻击</a></li></ul></li></ul></li>',1),y=(0,a.Uk)("网络安全 "),d=(0,a.Uk)("HTTPS"),g=(0,a.Uk)("：解决 HTTP 劫持（明文传输，内容篡改） "),h=(0,a._)("ul",null,[(0,a._)("li",null,"点击嵌套劫持"),(0,a._)("li",null,"广告")],-1),F=(0,a._)("li",null,[(0,a.Uk)("浏览器系统安全 "),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Uk)("多进程架构 + 渲染进程沙箱机制（将操作系统和渲染进程进行隔离，通过 IPC 来通信的） "),(0,a._)("img",{src:e,alt:"图 12"})]),(0,a._)("li",null,[(0,a._)("a",{href:"#%E7%AB%99%E7%82%B9%E9%9A%94%E7%A6%BB%E7%AD%96%E7%95%A5"},"站点隔离策略"),(0,a.Uk)("：将不同站点隔离在不同沙箱（进程）内")])])],-1),S=(0,a._)("li",null,"Web 身份认证及授权",-1),f=(0,a.uE)('<h2 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h2><p>同源策略：如果两个 URL 的协议、域名和端口都相同，我们就称这两个 URL 同源。同源策略会隔离不同源的之间的资源访问，比如 DOM、数据存储 Cookie、LocalStorage 和 IndexDB，网络请求 ajax/fetch。</p><p>同源策略是浏览器大局方面的安全策略，限制不同源的 web 页面之间的相互操作，以此来保证安全性，但是却极大地降低了便利性。在安全和便利性的权衡下，同源策略又做出了一些安全妥协：</p><ol><li>页面中可以嵌入第三方资源（容易导致 XSS 攻击，为了解决 XSS 攻击，浏览器中引入了内容安全策略，称为 CSP）</li><li>跨域资源共享（CORS）</li><li>跨文档消息机制（window.postMessage）</li></ol><p>其中 CSP 和 CORS 是在这种大策略“妥协”下的设置的阀门，保证一定便利性的同时确保安全。</p><p><img src="'+o+'" alt="图 8"></p><h2 id="跨站脚本攻击-xss" tabindex="-1"><a class="header-anchor" href="#跨站脚本攻击-xss" aria-hidden="true">#</a> 跨站脚本攻击（XSS）</h2><p>XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中<strong>注入恶意脚本</strong>，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><p>恶意脚本注入方式有：</p><ul><li>存储型 XSS 攻击 <ol><li>用户<strong>通过输入</strong>向服务器储存恶意脚本</li><li>服务器返回带有恶意脚本的页面 <img src="'+t+'" alt="图 1"></li></ol></li><li>反射型 XSS 攻击 <ol><li>反射型 XSS 攻击是将恶意代码拼接在 URL 处，常见于网站搜索、跳转等，一个特点是需要黑客诱导用户点击 URL 实现代码注入</li><li>服务端不做处理直接拼接在 HTML 处返回</li></ol></li><li>基于 DOM 的 XSS 攻击：主要利用 js 能够访问 DOM 的原理及前端页面不严谨的代码产生的安全漏洞，就会导致注入了恶意代码。比如使用 <code>.innerHTML</code>、<code>document.write()</code>、<code>document.outerHTML</code> 这些能够修改页面结构的 API 时要注意防范恶意代码，尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</li></ul><p>三种攻击方式区别：</p><ol><li>反射型 XSS 跟存储型 XSS 的区别是：<strong>存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里</strong>。</li><li>DOM 型 XSS 跟前两种 XSS 的区别：<strong>基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的</strong>。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</li></ol><h2 id="防止-xss-攻击" tabindex="-1"><a class="header-anchor" href="#防止-xss-攻击" aria-hidden="true">#</a> 防止 XSS 攻击</h2><p>XSS 攻击有两大要素：</p><ol><li>攻击者提交恶意代码。(输入来源)</li><li>浏览器执行恶意代码。（输出执行）</li></ol>',15),m=(0,a.uE)("<li>输入来源 <ul><li>客户端和服务器对用户<strong>输入</strong>内容进行过滤、限制其输入长度</li></ul></li><li>输出执行 <ul><li>拼接 HTML 字符串：对 HTML 进行转义编码（HTML 的编码是十分复杂的，在不同的上下文里要使用相应的转义规则）</li><li>防止 JavaScript 执行时，把<strong>不可信的输入数据</strong>当作<strong>字符串代码</strong>执行 <ul><li>DOM 操作 <ul><li>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code>、 <code>.style</code> 等</li><li><code>&lt;a&gt;</code> 标签的 href 属性</li></ul></li><li>eval</li><li>function</li><li>setTimeout、setInterval</li><li>window.location</li><li>等</li></ul></li></ul></li>",2),b=(0,a.Uk)("其他 "),E=(0,a.Uk)("充分利用 "),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP",target:"_blank",rel:"noopener noreferrer"},A=(0,a.Uk)("CSP 内容安全策略"),_=(0,a._)("li",null,"cookie 使用 HttpOnly 属性",-1),C=(0,a._)("li",null,"验证码：防止脚本冒充用户提交危险操作",-1),R=(0,a._)("h3",{id:"推荐阅读",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),(0,a.Uk)(" 推荐阅读")],-1),T={href:"https://tech.meituan.com/2018/09/27/fe-security.html",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("前端安全系列（一）：如何防止XSS攻击？"),B={href:"https://github.com/s0md3v/AwesomeXSS",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("AwesomeXSS"),X=(0,a.uE)('<h2 id="csrf-攻击-跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#csrf-攻击-跨站请求伪造" aria-hidden="true">#</a> CSRF 攻击（跨站请求伪造）</h2><p>CSRF（Cross-site request forgery），称为“跨站请求伪造”，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p>CSRF的特点</p><ul><li>CSRF（通常）发生在<strong>第三方域名</strong>，因为外域通常更容易被攻击者掌控。但如果被攻击网站管控用户内容不严格的话，也有可能被发布恶意超链接等，这样防护起来就更困难了，因为 referer 是来自于本身。</li><li>和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用<strong>服务器的漏洞</strong>和<strong>用户的登录状态</strong>来实施攻击。</li></ul><ol><li>GET类型的CSRF，如页面自动发起 Get 请求</li></ol><div class="language-html ext-html"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">&lt;!</span><span style="color:#116329;">DOCTYPE</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">body</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">    &lt;</span><span style="color:#116329;">h1</span><span style="color:#24292F;">&gt;黑客的站点：CSRF攻击演示&lt;/</span><span style="color:#116329;">h1</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">    &lt;</span><span style="color:#116329;">img</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">src</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot;</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;/</span><span style="color:#116329;">body</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"></span></code></pre></div><ol start="2"><li>POST类型的CSRF，如页面表单自动发起 POST 请求</li></ol><div class="language-html ext-html"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">&lt;!</span><span style="color:#116329;">DOCTYPE</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">body</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">h1</span><span style="color:#24292F;">&gt;黑客的站点：CSRF攻击演示&lt;/</span><span style="color:#116329;">h1</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">form</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">id</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&#39;hacker-form&#39;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">action</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;https://time.geekbang.org/sendcoin&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">method</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">POST</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">    &lt;</span><span style="color:#116329;">input</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;hidden&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">name</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;user&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">value</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;hacker&quot;</span><span style="color:#24292F;"> /&gt;</span></span>\n<span class="line"><span style="color:#24292F;">    &lt;</span><span style="color:#116329;">input</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;hidden&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">name</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;number&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">value</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;100&quot;</span><span style="color:#24292F;"> /&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;/</span><span style="color:#116329;">form</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt; document.</span><span style="color:#8250DF;">getElementById</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;hacker-form&#39;</span><span style="color:#24292F;">).</span><span style="color:#8250DF;">submit</span><span style="color:#24292F;">(); &lt;/</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">body</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">html</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>链接类型的CSRF</li></ol><p>比起其他两种用户打开页面就中招的情况，这种引诱需要用户点击链接才会触发。</p><div class="language-html ext-html"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">img</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">width</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">150</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">src</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">http://images.xuejuzi.cn/1612/1_161230185104_1.jpg</span><span style="color:#24292F;">&gt; &lt;/</span><span style="color:#82071E;font-style:italic;">img</span><span style="color:#24292F;">&gt; &lt;/</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt; &lt;</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">a</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">href</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">taget</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;_blank&quot;</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">    点击下载美女照片</span></span>\n<span class="line"><span style="color:#24292F;">  &lt;/</span><span style="color:#116329;">a</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h3 id="防止-csrf-攻击" tabindex="-1"><a class="header-anchor" href="#防止-csrf-攻击" aria-hidden="true">#</a> 防止 CSRF 攻击</h3><blockquote><p>根据 CSRF 的特点进行防备</p></blockquote><ul><li>CSRF（通常）发生在第三方域名，对第三方域限制 <ul><li>验证请求的来源站点（通过 HTTP 请求头中的 Referer 和 Origin 属性）</li><li>充分利用好 Cookie 的 SameSite 属性 <ul><li>Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据，通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，我们最好能实现从第三方站点发送请求时禁止 Cookie 的发送</li></ul></li></ul></li><li>CSRF 攻击不是将恶意代码注入用户的页面，不能获取页面数据信息 <ul><li>重要接口加验证参数 <ul><li>CSRF Token</li><li>图片、短信验证</li></ul></li></ul></li></ul><h2 id="站点隔离策略" tabindex="-1"><a class="header-anchor" href="#站点隔离策略" aria-hidden="true">#</a> 站点隔离策略</h2><p>同站和同源要求不一样，同源要求协议、主机名、端口一致：</p><p><img src="'+p+'" alt="图 14"></p><p>而同站条件：协议 、eTLD（有效顶级域） + 1 域相同：</p><p><img src="'+r+'" alt="图 13"></p>',19),q=(0,a.Uk)("eTLD 列表的维护网站是 "),w={href:"https://publicsuffix.org/list/",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)("publicsuffix.org/list"),P=(0,a.Uk)("。"),D=(0,a.uE)('<p>站点隔离即不同站点隔离在不同沙箱，Chromium 提供了四种进程模式：</p><ul><li>Process-per-site-instance (default) 每个站点实例即一个进程 <ul><li>每个站点实例即一个进程，意味着每个 tab 页即至少一个渲染进程。特殊情况，如果<strong>两个同站页面并且有关联连接，才使用同一进程</strong><ul><li><code>window.open</code>、<code>&lt;a target=&quot;_blank&quot;&gt;</code> 打开的新页面，通过 <code>window.opener</code> 访问另一个页面</li><li>同站点的 iframe</li></ul></li></ul></li><li>Process-per-site 同个站点使用同个进程</li><li>Process-per-tab 每个标签页一个进程</li><li>Single process 所有的共用一个进程</li></ul><p>Process-per-site-instance 是最重要的，因为这个是 Chrome 默认使用的模式，也就是几乎所有的用户都在用的模式。当你打开一个 tab 访问 a.baidu.com ，然后再打开一个 tab 访问 b.baidu.com，这两个 tab 会使用两个进程，而对于Process-per-site，当你打开 a.baidu.com 页面，在打开 b.baidu.com 的页面，这两个页面的tab使用的是共一个进程，因为这两个页面的site相同，而如此一来，如果其中一个tab崩溃了，而另一个tab也会崩溃。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',4),L=(0,a._)("li",null,"极客《浏览器工作原理与实践》",-1),M={href:"https://juejin.cn/post/6844903689702866952",target:"_blank",rel:"noopener noreferrer"},O=(0,a.Uk)("前端安全系列之二：如何防止CSRF攻击？"),H={href:"https://web.dev/same-site-same-origin/#%22schemeful-same-site%22",target:"_blank",rel:"noopener noreferrer"},W=(0,a.Uk)("理解“同站”和“同源”"),I={},j=(0,n(3860).Z)(I,[["render",function(l,s){const n=(0,a.up)("RouterLink"),e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[c,(0,a._)("ul",null,[(0,a._)("li",null,[i,(0,a._)("ul",null,[u,(0,a._)("li",null,[y,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(n,{to:"/HTTP/https.html"},{default:(0,a.w5)((()=>[d])),_:1}),g,h])])]),F,S])])]),f,(0,a._)("ul",null,[m,(0,a._)("li",null,[b,(0,a._)("ul",null,[(0,a._)("li",null,[E,(0,a._)("a",k,[A,(0,a.Wm)(e)])]),_,C])])]),R,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",T,[v,(0,a.Wm)(e)])]),(0,a._)("li",null,[(0,a._)("a",B,[x,(0,a.Wm)(e)])])]),X,(0,a._)("blockquote",null,[(0,a._)("p",null,[q,(0,a._)("a",w,[U,(0,a.Wm)(e)]),P])]),D,(0,a._)("ul",null,[L,(0,a._)("li",null,[(0,a._)("a",M,[O,(0,a.Wm)(e)])]),(0,a._)("li",null,[(0,a._)("a",H,[W,(0,a.Wm)(e)])])])])}]])},3860:(l,s)=>{s.Z=(l,s)=>{const n=l.__vccOpts||l;for(const[l,a]of s)n[l]=a;return n}}}]);