"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[4927],{9252:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-03fc2322",path:"/Vue/vue%20%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F.html",title:"Vue 的响应式系统",lang:"zh-CN",frontmatter:{release:!0,top:1,tags:["vue"],description:"响应式系统是 Vue 最底层的核心机制，本文将分析 Vue 响应式的实现原理及核心 Reative API 源码分析。"},excerpt:"",headers:[{level:2,title:"响应式原理",slug:"响应式原理",children:[{level:3,title:"Vue3 响应式原理 mini 版本实现",slug:"vue3-响应式原理-mini-版本实现",children:[]}]},{level:2,title:"Vue Reactive API 源码分析",slug:"vue-reactive-api-源码分析",children:[{level:3,title:"reactive",slug:"reactive",children:[]},{level:3,title:"effect",slug:"effect",children:[]},{level:3,title:"ref：Ref 与 Reactive 有何区别，为什么要有 Ref？",slug:"ref-ref-与-reactive-有何区别-为什么要有-ref",children:[]}]},{level:2,title:"参考学习",slug:"参考学习",children:[]}],git:{createdTime:1639382569e3,updatedTime:1657093142e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:10}]}}},8458:(s,n,a)=>{a.r(n),a.d(n,{default:()=>_});var l=a(5393);const p=a.p+"assets/img/c933683d4c9d4ba9febc57a188238b4d6438454844c7c072e7ff125c18f4f44c.7f390f9f.png",o=a.p+"assets/img/ee125fb4132319ddfa602c751d70f938510597caf5fdcc0b8788517fa0ee4207.0f7b29a3.svg",e=a.p+"assets/img/flag.c43368db.png",c=(0,l._)("h1",{id:"vue-的响应式系统",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#vue-的响应式系统","aria-hidden":"true"},"#"),(0,l.Uk)(" Vue 的响应式系统")],-1),t=(0,l._)("blockquote",null,[(0,l._)("p",null,"示例源码主要为 vue3.2")],-1),r=(0,l._)("p",null,"响应式系统是 Vue 最底层的核心机制，而且在 Vue3.x 中已经抽取成的 Reative API 可单独使用。",-1),y=(0,l.Uk)("Vue 的响应式系统 "),F=(0,l._)("li",null,[(0,l._)("a",{href:"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86"},"响应式原理")],-1),i=(0,l._)("li",null,[(0,l._)("a",{href:"#vue-reactive-api-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"},"Reative API 分析")],-1),E=(0,l.Uk)("响应式渲染机制"),f=(0,l.uE)('<h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">A</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">B</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">C</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">A</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">B</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">// change A</span></span>\n<span class="line"><span style="color:#0550AE;">A</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">C</span><span style="color:#24292F;">); </span><span style="color:#6E7781;">// 3</span></span>\n<span class="line"></span></code></pre></div><p>传统命令式编程下，A 发生改变，<code>C = A + B</code> 并不会重新执行。为了能够重新计算就需要将 <code>C = A + B</code> 语句包装成可复用的函数，并且观察 A 的变化以便发生改变时调用该函数。</p><p>Vue 的响应式原理的实现本质就是数据劫持 + 观察者模式，Subject、Observer 角色在 Vue3 响应式设计中分别对应的是 Reactive 响应式数据、Effect 副作用的概念。</p><p>Vue2 和 Vue3 的响应式实现并其实没多大区别，大致都是需要以下重要三步：</p><ol><li>数据劫持</li><li>依赖收集</li><li>变更通知</li></ol><p>只是数据劫持的方式从 <code>Object.defineProperty</code> 改为 <code>Proxy</code>。</p><h3 id="vue3-响应式原理-mini-版本实现" tabindex="-1"><a class="header-anchor" href="#vue3-响应式原理-mini-版本实现" aria-hidden="true">#</a> Vue3 响应式原理 mini 版本实现</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">reactive</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// case...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 数据代理、操作劫持</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Proxy</span><span style="color:#24292F;">(target, {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#24292F;">, </span><span style="color:#953800;">property</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 依赖收集</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">track</span><span style="color:#24292F;">(target, property);</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Reflect</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">...</span><span style="color:#0550AE;">arguments</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">    },</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#24292F;">, </span><span style="color:#953800;">property</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">result</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Reflect</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">...</span><span style="color:#0550AE;">arguments</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 变更通知</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">trigger</span><span style="color:#24292F;">(target, property);</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> result;</span></span>\n<span class="line"><span style="color:#24292F;">    },</span></span>\n<span class="line"><span style="color:#24292F;">  });</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>Proxy 代理的是一个对象，对象属性能够任意访问，我们需要跟踪数据被访问的地方，并将这些“观察者”收集起来。</p><p>reactive 包装下我们已经可以对数据进行访问、修改劫持。</p><h4 id="effect-包装" tabindex="-1"><a class="header-anchor" href="#effect-包装" aria-hidden="true">#</a> Effect 包装</h4><p>那么数据被访问时，我们要收集的是什么、怎么收集？</p><p>上面说到 <code>为了能够重新计算就需要将 C = A + B 语句包装成可复用的函数</code>，可是用户自定义的函数在执行过程中，我们是无法获取该函数对象。</p><p>将该需要重复调用的函数进行高阶函数封装成“副作用”，在“副作用”环境中有依赖到响应式数据时需要将当前“副作用”进行收集。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">effectStack</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> []; </span><span style="color:#6E7781;">// 副作用栈</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 当前执行的副作用环境</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">// 副作用</span></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">effect</span><span style="color:#24292F;">(</span><span style="color:#953800;">fn</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">_effect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">...</span><span style="color:#953800;">args</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 指向当前执行的副作用环境</span></span>\n<span class="line"><span style="color:#24292F;">    activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> _effect;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 清除响应式数据收集的当前副作用依赖</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">cleanup</span><span style="color:#24292F;">(activeEffect);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    effectStack.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">(fn);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">fn</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">args);</span></span>\n<span class="line"><span style="color:#24292F;">    effectStack.</span><span style="color:#8250DF;">pop</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">    activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> effectStack[effectStack.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">];</span></span>\n<span class="line"><span style="color:#24292F;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  _effect.deps </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">_effect</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="effectstack-用于副作用嵌套场景。" tabindex="-1"><a class="header-anchor" href="#effectstack-用于副作用嵌套场景。" aria-hidden="true">#</a> <code>effectStack</code>，用于副作用嵌套场景。</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">A</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">effect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  xxx;</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">B</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">effect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">A</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"></span></code></pre></div>',18),C=(0,l.Uk)("嵌套场景主要是 vue 组件嵌套，vue 组件的渲染也是一种副作用（"),d=(0,l.Uk)("vue 组件响应式更新渲染机制"),u=(0,l.Uk)("）。"),g=(0,l.uE)('<h4 id="cleanup-activeeffect-解决动态依赖场景。" tabindex="-1"><a class="header-anchor" href="#cleanup-activeeffect-解决动态依赖场景。" aria-hidden="true">#</a> <code>cleanup(activeEffect)</code>，解决动态依赖场景。</h4><p>在响应式作用下，每次副作用重新运行时都会触发响应式数据重新收集当前副作用，但并不是所有响应式数据在下次重新执行过程中被访问到，比如响应式数据 A 和 B，在下次重新运行因为 if 条件可能只使用到了 B，故需要清除 A 的依赖。</p><p>总而言之，就是为了解决动态依赖场景下，某个依赖已经不是当前副作用的依赖，故需要清除无效依赖。</p><p>一个简单方法就是将副作用之前的依赖全部清除，然后重新进行收集。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// 清除依赖</span></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cleanup</span><span style="color:#24292F;">(</span><span style="color:#953800;">effect</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">deps</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> effect;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 将副作用从当前响应式数据的依赖收集中删除</span></span>\n<span class="line"><span style="color:#24292F;">      deps[i].</span><span style="color:#8250DF;">delete</span><span style="color:#24292F;">(effect);</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">    deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="缓存结构" tabindex="-1"><a class="header-anchor" href="#缓存结构" aria-hidden="true">#</a> 缓存结构</h4><p>为了能够方便在代码上下文中找到对应响应式数据，设计一个缓存结构 <code>targetMap =&gt; depsMap =&gt; deps</code>。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// 缓存结构</span></span>\n<span class="line"><span style="color:#6E7781;">// targetMap =&gt; depsMap =&gt; deps</span></span>\n<span class="line"><span style="color:#6E7781;">// deps = new Set() // 收集响应式数据对应的依赖</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">depsMap</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Map</span><span style="color:#24292F;">(); </span><span style="color:#6E7781;">// 存放所有响应式数据的依赖集</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">targetMap</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">WeakMap</span><span style="color:#24292F;">(); </span><span style="color:#6E7781;">// 存放与响应式数据关联的代理对象</span></span>\n<span class="line"></span></code></pre></div><p><img src="'+p+'" alt=""></p><h4 id="副作用收集" tabindex="-1"><a class="header-anchor" href="#副作用收集" aria-hidden="true">#</a> 副作用收集</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">track</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#24292F;">, </span><span style="color:#953800;">key</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 获取响应式数据的依赖集</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> depsMap </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> targetMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(target);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">depsMap) {</span></span>\n<span class="line"><span style="color:#24292F;">    targetMap.</span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(target, (depsMap </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Map</span><span style="color:#24292F;">()));</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> deps </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> depsMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(key);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">deps) {</span></span>\n<span class="line"><span style="color:#24292F;">    depsMap.</span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(key, (deps </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Set</span><span style="color:#24292F;">()));</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">deps.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(activeEffect)) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 收集当前激活的 effect</span></span>\n<span class="line"><span style="color:#24292F;">    deps.</span><span style="color:#8250DF;">add</span><span style="color:#24292F;">(activeEffect);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 当前响应式数据的 dpes 作为 effect 的依赖</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// clearup 时能够将副作用从响应式数据的 deps 中清除</span></span>\n<span class="line"><span style="color:#24292F;">    activeEffect.deps.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">(deps);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p><img src="'+o+'" alt="图 3"></p><p>响应式数据修改触发副作用执行，即相当于观察者模式下的变更通知。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">trigger</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#24292F;">, </span><span style="color:#953800;">key</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">depsMap</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> targetMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(target);</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">depsMap) </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> deps </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> depsMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(key);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (deps) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">effect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">of</span><span style="color:#24292F;"> [</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">deps]) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">effect</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="vue-reactive-api-源码分析" tabindex="-1"><a class="header-anchor" href="#vue-reactive-api-源码分析" aria-hidden="true">#</a> Vue Reactive API 源码分析</h2><blockquote><p>Vue Reactive API 基本实现原理大概类似上面，下面仅对部分 API 源码细节分析</p></blockquote><p>Vue Reactive API 大致分为两类：</p><ul><li>响应式数据 <ul><li><a href="#reactive">reactive</a><ul><li><a href="#%E5%86%85%E9%83%A8-reactiveflags-key">ReactiveFlags key</a></li></ul></li><li><a href="#refref-%E4%B8%8E-reactive-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-ref">ref：Ref 与 Reactive 有何区别，为什么要有 Ref？</a></li><li>computed</li><li>deferredComputed</li></ul></li><li>响应式副作用 <ul><li>effect，将副作用封装成响应式副作用 <ul><li><a href="#reactiveeffect">ReactiveEffect</a></li></ul></li><li>effectScope <ul><li>getCurrentScope</li><li>onScopeDispose</li></ul></li><li><em>runtiom-dom</em><ul><li>watchEffect</li><li>watch</li></ul></li></ul></li></ul><h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> reactive</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// packages/reactivity/src/reactive.ts</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createReactiveObject</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">target</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Target</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">isReadonly</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">baseHandlers</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ProxyHandler</span><span style="color:#24292F;">&lt;</span><span style="color:#0550AE;">any</span><span style="color:#24292F;">&gt;,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">collectionHandlers</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ProxyHandler</span><span style="color:#24292F;">&lt;</span><span style="color:#0550AE;">any</span><span style="color:#24292F;">&gt;,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">proxyMap</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">WeakMap</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Target</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">any</span><span style="color:#24292F;">&gt;</span></span>\n<span class="line"><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">//proxy 对象再次 reactive 还是原 proxy，除非转是 readyonly</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span></span>\n<span class="line"><span style="color:#24292F;">    target[ReactiveFlags.</span><span style="color:#0550AE;">RAW</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">(isReadonly </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> target[ReactiveFlags.</span><span style="color:#0550AE;">IS_REACTIVE</span><span style="color:#24292F;">])</span></span>\n<span class="line"><span style="color:#24292F;">  ) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> target;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">//同一原始 target 多次执行 reactive 都会得到同一 proxy</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">existingProxy</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> proxyMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(target);</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (existingProxy) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> existingProxy;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 只允许普通对象或者集合类型，内置对象类型如 Date、Function 类型则不可以</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">targetType</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getTargetType</span><span style="color:#24292F;">(target);</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (targetType </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> TargetType.</span><span style="color:#0550AE;">INVALID</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> target;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">proxy</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Proxy</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">    target,</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 根据数据类型，分为基础对象代理操作和集合类型代理操作</span></span>\n<span class="line"><span style="color:#24292F;">    targetType </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> TargetType.</span><span style="color:#0550AE;">COLLECTION</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> collectionHandlers </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> baseHandlers</span></span>\n<span class="line"><span style="color:#24292F;">  );</span></span>\n<span class="line"><span style="color:#24292F;">  proxyMap.</span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(target, proxy);</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> proxy;</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">targetTypeMap</span><span style="color:#24292F;">(</span><span style="color:#953800;">rawType</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">switch</span><span style="color:#24292F;"> (rawType) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;Object&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;Array&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> TargetType.</span><span style="color:#0550AE;">COMMON</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;Map&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;Set&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;WeakMap&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;WeakSet&quot;</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> TargetType.</span><span style="color:#0550AE;">COLLECTION</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">default</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> TargetType.</span><span style="color:#0550AE;">INVALID</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><ol><li>proxy 对象再次 reactive 还是原 proxy，除非转 readyonly</li><li>同一原始 target 多次执行 reactive 都会得到同一 proxy（proxyMap 缓存）</li><li>只允许普通对象或者集合类型，内置对象类型如 Date、Function 类型则不可以</li><li>__v_skip 属性的对象、被冻结的对象</li></ol><h4 id="内部-reactiveflags-key" tabindex="-1"><a class="header-anchor" href="#内部-reactiveflags-key" aria-hidden="true">#</a> 内部 ReactiveFlags key</h4><p>Vue 内部会针对有 ReactiveFlags 的对象做一些特殊处理。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">enum</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveFlags</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  SKIP </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;__v_skip&quot;</span><span style="color:#24292F;">, </span><span style="color:#6E7781;">// 跳过响应化</span></span>\n<span class="line"><span style="color:#24292F;">  IS_REACTIVE </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;__v_isReactive&quot;</span><span style="color:#24292F;">, </span><span style="color:#6E7781;">// 响应式标记</span></span>\n<span class="line"><span style="color:#24292F;">  IS_READONLY </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;__v_isReadonly&quot;</span><span style="color:#24292F;">, </span><span style="color:#6E7781;">// 响应式只读标记</span></span>\n<span class="line"><span style="color:#24292F;">  IS_SHALLOW </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;__v_isShallow&#39;</span><span style="color:#24292F;">, </span><span style="color:#6E7781;">// 浅响应，即只对对象第一层属性响应式</span></span>\n<span class="line"><span style="color:#24292F;">  RAW </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;__v_raw&quot;</span><span style="color:#24292F;">, </span><span style="color:#6E7781;">// 原始数据</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>工具函数 isReactive、isReadonly、isProxy、markRaw 等都是 flag key 快速实现。</p><p><img src="'+e+'" alt=""></p><h4 id="get-依赖收集" tabindex="-1"><a class="header-anchor" href="#get-依赖收集" aria-hidden="true">#</a> get 依赖收集</h4><p>get 代理操作主要做了 3 件事：</p><ol><li>依赖跟踪、收集</li><li>数组操作代理</li><li>延迟响应式</li></ol><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// createReactiveObject =&gt; baseHandlers =&gt; createGetter</span></span>\n<span class="line"><span style="color:#6E7781;">// packages/reactivity/src/baseHandlers.ts</span></span>\n<span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createGetter</span><span style="color:#24292F;">(</span><span style="color:#953800;">isReadonly</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#953800;">shallow</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(</span><span style="color:#953800;">target</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Target</span><span style="color:#24292F;">, </span><span style="color:#953800;">key</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">symbol</span><span style="color:#24292F;">, </span><span style="color:#953800;">receiver</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">object</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 内部特殊 key 处理...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 数组操作代理</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">targetIsArray</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isArray</span><span style="color:#24292F;">(target);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">isReadonly </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> targetIsArray </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hasOwn</span><span style="color:#24292F;">(arrayInstrumentations, key)) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Reflect</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(arrayInstrumentations, key, receiver);</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">res</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Reflect</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(target, key, receiver);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">isReadonly) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 依赖收集</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">track</span><span style="color:#24292F;">(target, TrackOpTypes.</span><span style="color:#0550AE;">GET</span><span style="color:#24292F;">, key);</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// case...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isObject</span><span style="color:#24292F;">(res)) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 延迟响应化，性能优化，不像以前初始化时递归响应化</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// Convert returned value into a proxy as well. we do the isObject check</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// here to avoid invalid value warning. Also need to lazy access readonly</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// and reactive here to avoid circular dependency.</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> isReadonly </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">readonly</span><span style="color:#24292F;">(res) </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">reactive</span><span style="color:#24292F;">(res);</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> res;</span></span>\n<span class="line"><span style="color:#24292F;">  };</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="数组代理" tabindex="-1"><a class="header-anchor" href="#数组代理" aria-hidden="true">#</a> 数组代理</h4><p>得益于 Proxy，Vue3 对数组已不需要重写数组部分 API，但某些数组方法与代理对象之间会存在需要重写。</p><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createArrayInstrumentations</span><span style="color:#24292F;">() {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">instrumentations</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Record</span><span style="color:#24292F;">&lt;</span><span style="color:#0550AE;">string</span><span style="color:#24292F;">, </span><span style="color:#953800;">Function</span><span style="color:#24292F;">&gt; </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {}</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// instrument identity-sensitive Array methods to account for possible reactive</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// values</span></span>\n<span class="line"><span style="color:#24292F;">  ;([</span><span style="color:#0A3069;">&#39;includes&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;indexOf&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;lastIndexOf&#39;</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;">).</span><span style="color:#8250DF;">forEach</span><span style="color:#24292F;">(</span><span style="color:#953800;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    instrumentations[key] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> (</span><span style="color:#0550AE;">this</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">[], </span><span style="color:#CF222E;">...</span><span style="color:#953800;">args</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">[]) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">arr</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">toRaw</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">, l </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> l; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">track</span><span style="color:#24292F;">(arr, TrackOpTypes.</span><span style="color:#0550AE;">GET</span><span style="color:#24292F;">, i </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">      }</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// we run the method using the original args first (which may be reactive)</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">res</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> arr[key](</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">args)</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (res </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">-</span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> res </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// if that didn&#39;t work, run it again using raw values.</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> arr[key](</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">args.</span><span style="color:#8250DF;">map</span><span style="color:#24292F;">(toRaw))</span></span>\n<span class="line"><span style="color:#24292F;">      } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> res</span></span>\n<span class="line"><span style="color:#24292F;">      }</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  })</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// instrument length-altering mutation methods to avoid length being tracked</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// which leads to infinite loops in some cases (#2137)</span></span>\n<span class="line"><span style="color:#24292F;">  ;([</span><span style="color:#0A3069;">&#39;push&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;pop&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;shift&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;unshift&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;splice&#39;</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;">).</span><span style="color:#8250DF;">forEach</span><span style="color:#24292F;">(</span><span style="color:#953800;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    instrumentations[key] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> (</span><span style="color:#0550AE;">this</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">[], </span><span style="color:#CF222E;">...</span><span style="color:#953800;">args</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">[]) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">pauseTracking</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">res</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">toRaw</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span><span style="color:#24292F;">)[key].</span><span style="color:#8250DF;">apply</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">, args)</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#8250DF;">resetTracking</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> res</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  })</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> instrumentations</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><ol><li>保证 includes、indexOf、lastIndexOf 参数可接受响应式数据</li><li>push、pop 等数组操作会返回 length，防止再次触发 get。</li></ol><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">test</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> [</span><span style="color:#0550AE;">1</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">3</span><span style="color:#24292F;">];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">_test</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Proxy</span><span style="color:#24292F;">(test, {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(</span><span style="color:#953800;">traget</span><span style="color:#24292F;">, </span><span style="color:#953800;">key</span><span style="color:#24292F;">, </span><span style="color:#953800;">r</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">res</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Reflect</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">...</span><span style="color:#0550AE;">arguments</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">    console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(key, res);</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> res;</span></span>\n<span class="line"><span style="color:#24292F;">  },</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">// 访问属性: proxy[foo]和 proxy.bar</span></span>\n<span class="line"><span style="color:#24292F;">_test.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">4</span><span style="color:#24292F;">); </span><span style="color:#6E7781;">// 返回 _test.length 会再触发 get</span></span>\n<span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(_test.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">);</span></span>\n<span class="line"></span></code></pre></div><h3 id="effect" tabindex="-1"><a class="header-anchor" href="#effect" aria-hidden="true">#</a> effect</h3><p>effect 将副作用封装成响应式副作用，能够在响应式数据发生变化时重新执行。effect 是一个偏低层 API，是同步调度。在 Vue 开发中，用得更多的是 <code>watchEffect</code> 和 <code>watch</code>。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">interface</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectOptions</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">DebuggerOptions</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">lazy</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 延迟执行</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">scheduler</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">EffectScheduler</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 副作用执行调度器</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">scope</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">EffectScope</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 副作用作用域</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">allowRecurse</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">onStop</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">// 将副作用封装成响应式副作用</span></span>\n<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">effect</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">T</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span><span style="color:#24292F;">&gt;(</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">fn</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">options</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectOptions</span></span>\n<span class="line"><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectRunner</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((fn </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectRunner</span><span style="color:#24292F;">).effect) {</span></span>\n<span class="line"><span style="color:#24292F;">    fn </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (fn </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectRunner</span><span style="color:#24292F;">).effect.fn</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 生成副作用对象</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">_effect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">ReactiveEffect</span><span style="color:#24292F;">(fn)</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (options) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">extend</span><span style="color:#24292F;">(_effect, options)</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (options.scope) </span><span style="color:#8250DF;">recordEffectScope</span><span style="color:#24292F;">(_effect, options.scope)</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// 延迟执行控制</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">options </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">options.lazy) {</span></span>\n<span class="line"><span style="color:#24292F;">    _effect.</span><span style="color:#8250DF;">run</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">runner</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> _effect.run.</span><span style="color:#8250DF;">bind</span><span style="color:#24292F;">(_effect) </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffectRunner</span></span>\n<span class="line"><span style="color:#24292F;">  runner.effect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> _effect</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> runner</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffect</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">T</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">any</span><span style="color:#24292F;">&gt; {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">active</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">deps</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dep</span><span style="color:#24292F;">[] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> []; </span><span style="color:#6E7781;">// 存储相关响应式数据依赖</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// can be attached after creation</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">computed</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">allowRecurse</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">boolean</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">onStop</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// dev only</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">onTrack</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> (</span><span style="color:#953800;">event</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DebuggerEvent</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// dev only</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">onTrigger</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> (</span><span style="color:#953800;">event</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DebuggerEvent</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">void</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">constructor</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">fn</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">scheduler</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">EffectScheduler</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">scope</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">EffectScope</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span></span>\n<span class="line"><span style="color:#24292F;">  ) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">recordEffectScope</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">, scope);</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">run</span><span style="color:#24292F;">() {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// ...</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">try</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">      effectStack.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">((activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">fn</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">    } </span><span style="color:#CF222E;">finally</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">      effectStack.</span><span style="color:#8250DF;">pop</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> effectStack.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">      activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> effectStack[n </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">undefined</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">stop</span><span style="color:#24292F;">() {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 停止副作用</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h4 id="reactiveeffect-run-副作用执行" tabindex="-1"><a class="header-anchor" href="#reactiveeffect-run-副作用执行" aria-hidden="true">#</a> ReactiveEffect.run 副作用执行</h4><p>在上面 mini 响应式实现中，每次副作用重新执行前都要 <code>clearup()</code> 清除副作用的所有依赖，然后再在执行过程中重新收集依赖，因为在动态执行过程中，旧依赖可能不再是依赖。</p><p>这个过程牵涉到大量对 Set 集合的添加和删除操作。在许多场景下，依赖关系是很少改变的，因此这里存在一定的优化空间。</p><p>Vue3.2 采用大概思路就是标记清除：</p><ol><li>执行前先对所有依赖进行“已收集”标记</li><li>执行过程对依赖重新标记为“新收集”</li><li>删除掉所有不是最新的已收集依赖</li></ol><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createDep</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">effects</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">dep</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Set</span><span style="color:#24292F;">(effects);</span></span>\n<span class="line"><span style="color:#24292F;">  dep.w </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 标记已收集</span></span>\n<span class="line"><span style="color:#24292F;">  dep.n </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// 标记新收集</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> dep;</span></span>\n<span class="line"><span style="color:#24292F;">};</span></span>\n<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">effectStack</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffect</span><span style="color:#24292F;">[] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> [] </span><span style="color:#6E7781;">// 副作用栈</span></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> activeEffect</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">undefined</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 栈顶副作用</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> effectTrackDepth </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 副作用栈深度</span></span>\n<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> trackOpBit </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 用于标识依赖收集的状态</span></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">maxMarkerBits</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">30</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 表示最大标记的位数，trackOpBit 超过时则执行 clearup() 依赖全清</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#6E7781;">// 响应式副作用执行</span></span>\n<span class="line"><span style="color:#8250DF;">run</span><span style="color:#24292F;">() {</span></span>\n<span class="line"><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.active) {</span></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">fn</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;"> }</span></span>\n<span class="line"><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">effectStack.</span><span style="color:#8250DF;">includes</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">)) {</span></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">try</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#6E7781;">// 入栈</span></span>\n<span class="line"><span style="color:#24292F;">     effectStack.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">((activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">))</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#8250DF;">enableTracking</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#6E7781;">// 将栈深度转换成二进制</span></span>\n<span class="line"><span style="color:#24292F;">     trackOpBit </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&lt;&lt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">++</span><span style="color:#24292F;">effectTrackDepth</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (effectTrackDepth </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> maxMarkerBits) {</span></span>\n<span class="line"><span style="color:#24292F;">       </span><span style="color:#6E7781;">// 将所有依赖初始化为已收集</span></span>\n<span class="line"><span style="color:#24292F;">       </span><span style="color:#8250DF;">initDepMarkers</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">     } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">       </span><span style="color:#8250DF;">cleanupEffect</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">     }</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#6E7781;">// 副作用执行</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">fn</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">   } </span><span style="color:#CF222E;">finally</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (effectTrackDepth </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> maxMarkerBits) {</span></span>\n<span class="line"><span style="color:#24292F;">       </span><span style="color:#6E7781;">// 清除旧依赖</span></span>\n<span class="line"><span style="color:#24292F;">       </span><span style="color:#8250DF;">finalizeDepMarkers</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">     }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">     trackOpBit </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&lt;&lt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">--</span><span style="color:#24292F;">effectTrackDepth</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#8250DF;">resetTracking</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#6E7781;">// 出栈</span></span>\n<span class="line"><span style="color:#24292F;">     effectStack.</span><span style="color:#8250DF;">pop</span><span style="color:#24292F;">()</span></span>\n<span class="line"><span style="color:#24292F;">     </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> effectStack.</span><span style="color:#0550AE;">length</span></span>\n<span class="line"><span style="color:#24292F;">     activeEffect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> effectStack[n </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">undefined</span></span>\n<span class="line"><span style="color:#24292F;">   }</span></span>\n<span class="line"><span style="color:#24292F;"> }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"><span style="color:#6E7781;">//...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">initDepMarkers</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> ({ </span><span style="color:#953800;">deps</span><span style="color:#24292F;"> }) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">      deps[i].w </span><span style="color:#CF222E;">|=</span><span style="color:#24292F;"> trackOpBit </span><span style="color:#6E7781;">// 赋值给 w 标记依赖已经被收集</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>重新依赖收集。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">trackEffects</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">dep</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dep</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">debuggerEventExtraInfo</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DebuggerEventExtraInfo</span></span>\n<span class="line"><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> shouldTrack </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (effectTrackDepth </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> maxMarkerBits) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 判断依赖是否被标记为新的</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">newTracked</span><span style="color:#24292F;">(dep)) {</span></span>\n<span class="line"><span style="color:#24292F;">      dep.n </span><span style="color:#CF222E;">|=</span><span style="color:#24292F;"> trackOpBit </span><span style="color:#6E7781;">// 标记为最新依赖</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 如果依赖已经被收集，则不需要再次收集</span></span>\n<span class="line"><span style="color:#24292F;">      shouldTrack </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">wasTracked</span><span style="color:#24292F;">(dep)</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// Full cleanup mode.</span></span>\n<span class="line"><span style="color:#24292F;">    shouldTrack </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">dep.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(activeEffect</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shouldTrack) {</span></span>\n<span class="line"><span style="color:#24292F;">    dep.</span><span style="color:#8250DF;">add</span><span style="color:#24292F;">(activeEffect</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">    activeEffect</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">.deps.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">(dep)</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><p>清除旧依赖。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">finalizeDepMarkers</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">effect</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffect</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">deps</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> effect;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> ptr </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">dep</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> deps[i];</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">wasTracked</span><span style="color:#24292F;">(dep) </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">newTracked</span><span style="color:#24292F;">(dep)) {</span></span>\n<span class="line"><span style="color:#24292F;">        dep.</span><span style="color:#8250DF;">delete</span><span style="color:#24292F;">(effect); </span><span style="color:#6E7781;">// 删除旧依赖</span></span>\n<span class="line"><span style="color:#24292F;">      } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">        deps[ptr</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> dep; </span><span style="color:#6E7781;">// 调整 deps 数组</span></span>\n<span class="line"><span style="color:#24292F;">      }</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#6E7781;">// 重置回上一层状态</span></span>\n<span class="line"><span style="color:#24292F;">      dep.w </span><span style="color:#CF222E;">&amp;=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">trackOpBit;</span></span>\n<span class="line"><span style="color:#24292F;">      dep.n </span><span style="color:#CF222E;">&amp;=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">trackOpBit;</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">    deps.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> ptr;</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">};</span></span>\n<span class="line"></span></code></pre></div><h4 id="trackopbit-的设计" tabindex="-1"><a class="header-anchor" href="#trackopbit-的设计" aria-hidden="true">#</a> trackOpBit 的设计</h4><p>trackOpBit 设计为二进制位是跟踪响应式数据在 effect 嵌套深度的被收集位置，如果使用数组方式去记录状态，空间及运算效率不如二进制高。</p><blockquote><p>js 二进制数据前缀表示 0b</p></blockquote><ol><li>初始时 trackOpBit = 0，w = 0</li><li>数据在第一层使用时: trackOpBit = 0b10， w |= trackOpBit = 0b10</li><li>数据在第二层使用 trackOpBit = 0b100， w |= trackOpBit = 0b110</li><li>trackOpBit = 0b100 可以表示当前是在第二层，w 通过或运算可以记录数据在哪几层使用过</li></ol><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">wasTracked</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">dep</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> (dep.w </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> trackOpBit) </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span></code></pre></div><p>通过与运算就可以知道该依赖是否在当前层收集过。</p><h4 id="reactiveeffect-allowrecurse" tabindex="-1"><a class="header-anchor" href="#reactiveeffect-allowrecurse" aria-hidden="true">#</a> ReactiveEffect.allowRecurse</h4>',57),h=(0,l.Uk)("ReactiveEffect.allowRecurse 是否允许副作用递归（重复）执行，默认 allowRecurse 是 undefined 为不允许，"),v=(0,l.Uk)("场景应用了解"),A=(0,l.Uk)("。"),k=(0,l._)("h4",{id:"reactiveeffect-scheduler-副作用调度器",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#reactiveeffect-scheduler-副作用调度器","aria-hidden":"true"},"#"),(0,l.Uk)(" ReactiveEffect.scheduler 副作用调度器")],-1),D=(0,l.Uk)("默认情况下，副作用是同步触发执行，当设置调度器时则由其调度执行，了解 "),b=(0,l.Uk)("vue 的渲染调度机制：异步更新"),x=(0,l.Uk)("。"),B=(0,l.uE)('<div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">triggerEffects</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">dep</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dep</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#953800;">ReactiveEffect</span><span style="color:#24292F;">[],</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">debuggerEventExtraInfo</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DebuggerEventExtraInfo</span></span>\n<span class="line"><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#6E7781;">// spread into array for stabilization</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">effect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">of</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isArray</span><span style="color:#24292F;">(dep) </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> dep </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> [</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">dep]) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (effect.scheduler) {</span></span>\n<span class="line"><span style="color:#24292F;">      effect.</span><span style="color:#8250DF;">scheduler</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">    } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">      effect.</span><span style="color:#8250DF;">run</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="ref-ref-与-reactive-有何区别-为什么要有-ref" tabindex="-1"><a class="header-anchor" href="#ref-ref-与-reactive-有何区别-为什么要有-ref" aria-hidden="true">#</a> ref：Ref 与 Reactive 有何区别，为什么要有 Ref？</h3><p>Vue 提供了 reactive、ref 创建响应式数据，那么 reactive 和 ref 有什么区别？</p><ol><li>Vue 数据劫持的实现上无论是 Object.defineProperty、proxy 都有个缺点就是必须是对象类型，不支持基础类型</li><li>（个人觉得）ref 主要是规范化对原始类型的响应式化，即将原始类型包装成带 value 属性的对象再进行响应化</li><li>实现原理细节上 <ul><li>reactive 是通过 proxy 实现</li><li>ref 的实现上使用 object.defineProperty 的 get 与 set 完成的，但对于非原始类型的参数则转换成 reactive 去响应化（Why？个人猜测，如果一个原始类型直接通过 reactive 支持，需要创建一个 Map 对象，参考上面 <a href="#%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84">reactive 实现的缓存结构</a>，有点浪费）</li></ul></li></ol><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">convert</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> &lt;</span><span style="color:#953800;">T</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">extends</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">&gt;(</span><span style="color:#953800;">val</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">isObject</span><span style="color:#24292F;">(val) </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">reactive</span><span style="color:#24292F;">(val) </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> val</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">RefImpl</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">T</span><span style="color:#24292F;">&gt; {</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">private</span><span style="color:#24292F;"> </span><span style="color:#953800;">_value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">private</span><span style="color:#24292F;"> </span><span style="color:#953800;">_rawValue</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">dep</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Dep</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">undefined</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">readonly</span><span style="color:#24292F;"> </span><span style="color:#953800;">__v_isRef</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">constructor</span><span style="color:#24292F;">(</span><span style="color:#953800;">value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">T</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">readonly</span><span style="color:#24292F;"> </span><span style="color:#953800;">_shallow</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">._rawValue </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> _shallow </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> value </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">toRaw</span><span style="color:#24292F;">(value)</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// value 值为对象类型，则转换成 reactive 支持</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">._value </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> _shallow </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> value </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">convert</span><span style="color:#24292F;">(value)</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">get</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">value</span><span style="color:#24292F;">() {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">set</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">value</span><span style="color:#24292F;">(</span><span style="color:#953800;">newVal</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">//...</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="参考学习" tabindex="-1"><a class="header-anchor" href="#参考学习" aria-hidden="true">#</a> 参考学习</h2>',6),R={href:"https://mp.weixin.qq.com/s/02-6xMskeTMuTwrJ1fkZow",target:"_blank",rel:"noopener noreferrer"},m=(0,l.Uk)("细说 Vue.js 3.2 关于响应式部分的优化"),w={},_=(0,a(3860).Z)(w,[["render",function(s,n){const a=(0,l.up)("RouterLink"),p=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)("div",null,[c,t,r,(0,l._)("ul",null,[(0,l._)("li",null,[y,(0,l._)("ul",null,[F,i,(0,l._)("li",null,[(0,l.Wm)(a,{to:"/Vue/vue%20%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6.html"},{default:(0,l.w5)((()=>[E])),_:1})])])])]),f,(0,l._)("p",null,[C,(0,l.Wm)(a,{to:"/Vue/vue%20%E7%BB%84%E4%BB%B6%E5%93%8D%E5%BA%94%E5%BC%8F%E6%9B%B4%E6%96%B0%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6.html"},{default:(0,l.w5)((()=>[d])),_:1}),u]),g,(0,l._)("p",null,[h,(0,l.Wm)(a,{to:"/Vue/vue%20%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6.html#Effect.allowRecurse"},{default:(0,l.w5)((()=>[v])),_:1}),A]),k,(0,l._)("p",null,[D,(0,l.Wm)(a,{to:"/Vue/vue%20%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6.html"},{default:(0,l.w5)((()=>[b])),_:1}),x]),B,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("a",R,[m,(0,l.Wm)(p)])])])])}]])},3860:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);