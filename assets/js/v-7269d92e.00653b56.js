"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[1985],{2039:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-7269d92e",path:"/RxJS/%E4%B8%8B%E8%BD%BD%E4%B8%AD%E5%BF%83%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0.html",title:"使用 RxJS 设计实现一个下载中心功能",lang:"zh-CN",frontmatter:{release:!0,top:5,title:"使用 RxJS 设计实现一个下载中心功能",tags:["rxjs","css","animate"]},excerpt:"",headers:[{level:2,title:"实时查询（轮询、rxjs）",slug:"实时查询-轮询、rxjs",children:[{level:3,title:"轮询时机",slug:"轮询时机",children:[]},{level:3,title:"轮询实现（rxjs）",slug:"轮询实现-rxjs",children:[]}]},{level:2,title:"抛物线交互体验",slug:"抛物线交互体验",children:[]}],git:{createdTime:162046753e4,updatedTime:1646897627e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:5}]}}},2747:(s,n,a)=>{a.r(n),a.d(n,{default:()=>D});var l=a(5393);const p=a.p+"assets/img/download-manager.a8e82313.png",o=a.p+"assets/img/dm-tips.5199a3c3.png",e=(0,l._)("h1",{id:"使用-rxjs-设计实现一个下载中心功能",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#使用-rxjs-设计实现一个下载中心功能","aria-hidden":"true"},"#"),(0,l.Uk)(" 使用 RxJS 设计实现一个下载中心功能")],-1),t=(0,l._)("p",null,[(0,l._)("img",{src:p,alt:""})],-1),r=(0,l.Uk)("原先系统的数据导出功能方案是通过前端技术相关方案实现：使用 "),c={href:"https://github.com/SheetJS/sheetjs",target:"_blank",rel:"noopener noreferrer"},y=(0,l.Uk)("js-xlsx"),F=(0,l.Uk)(" 生成 excel 文件；但遇到较多数据量及复杂提高时，容易造成页面卡死现象，主要原因是主线程阻塞，后续使用 "),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"},d=(0,l.Uk)("web-workers"),E=(0,l.Uk)(" 方案，通过其他线程完成 excel 数据处理；但是遇到庞大数据量时，前端处理大量数据会消耗大量内存，更严重导致内存泄露，页面直接崩溃情况。"),h=(0,l.uE)('<p>为了提高用户体验，现调整为：后端异步处理数据查询和表格生成，并上传至OSS，用户在统一“附件下载中心”进行下载</p><p>对于前端设计改造需求点：</p><ol><li>附件中心记录用户的下载任务，便于重复下载</li><li>附件中心实时反馈附件状态（排队、生成、完成、失败）</li></ol><h2 id="实时查询-轮询、rxjs" tabindex="-1"><a class="header-anchor" href="#实时查询-轮询、rxjs" aria-hidden="true">#</a> 实时查询（轮询、rxjs）</h2><p>为了降低系统实现复杂度，实时方案改为前端轮询请求</p><p>前端轮询时需要注意轮询请求几个点，避免造成性能浪费：</p><p><img src="'+o+'" alt=""></p><ol><li>何时轮询</li><li>轮询间隔</li><li>轮询结束</li><li>轮询重复</li><li>结果反馈</li></ol><h3 id="轮询时机" tabindex="-1"><a class="header-anchor" href="#轮询时机" aria-hidden="true">#</a> 轮询时机</h3><p>在用户系统使用中，产生轮询时机大概有以下三种情况：</p><ul><li>刷新页面</li><li>excel导出</li><li>重试任务</li></ul><p>对于以上三种事件，前端需要响应处理。</p><p>其实像前端开发工作，大部分都是以事件驱动编程。我们往往需要面对响应不同事件处理，这些事件可能来自网络请求、用户交互反馈等，<strong>异步回调、分散的状态和副作用</strong>会随着代码规模增加越难维护。</p><h3 id="轮询实现-rxjs" tabindex="-1"><a class="header-anchor" href="#轮询实现-rxjs" aria-hidden="true">#</a> 轮询实现（rxjs）</h3><p>轮询大概实现步骤：</p><ol><li>当发生页面刷新、导出数据、重试任务时</li><li>发送一次列表求</li><li>判断返回结果列表中是否含有有排队中、生成中的任务</li><li>若有，则产生一个轮询任务，同一时间仅有一个轮询任务（防止重复轮询）</li><li>轮询任务会每隔一定时间再发送列表请求</li><li>直到列表状态全为已完成或者失败</li></ol>',16),g=(0,l.Uk)("先把实现逻辑搬上，轮询实现接下来借助 "),A={href:"https://github.com/ReactiveX/rxjs",target:"_blank",rel:"noopener noreferrer"},C=(0,l.Uk)("rxjs"),f=(0,l.Uk)(" 利器"),x=(0,l.uE)('<p>在 rxjs 世界里，<em>everything is a stream</em>，任何事件都是流，什么是流？流就是现在、未来的事件集，事件具有过去、现在、未来特性吧，但我们更关注的是现在发生及未来事件的到来。</p><p>既然有了事件流的概念，那我们可以订阅观察这些事件流、也可以通过 pipe 把这些事件数据处理或者转换成其他事件流。事件流的 pipe 操作就类比数组过滤 <code>[1, 2, 3].filter(e =&gt; {...})</code> 的 <code>filter</code>，数组也是数据集，只不过数组数据源上的数据操作都是同步的，不能处理异步数据，那么数据流是不是看起来就像 <code>[1,2,3,4...]</code></p><p>我们把页面刷新(也就是重新开发)、导出下载数据、重试任务事件流分别用 <code>start$、download$、retry$</code> （流的变量命名 <code>$</code> 结尾 ）表示</p><div class="language-text ext-text"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292f;">start$:     --s--------------------------&gt;</span></span>\n<span class="line"><span style="color:#24292f;">download$:  ----------d-------------d----&gt;</span></span>\n<span class="line"><span style="color:#24292f;">retry$:     -----------------r-----------&gt;</span></span>\n<span class="line"><span style="color:#24292f;">merge$:     --m-------m------m------m----&gt;</span></span>\n<span class="line"><span style="color:#24292f;"></span></span>\n<span class="line"><span style="color:#24292f;">loop$:      --l-&gt;|----l-&gt;|---l-&gt;|---l----&gt;</span></span>\n<span class="line"><span style="color:#24292f;"></span></span></code></pre></div><p>同一时间轴上，无论发生页面刷新、导出数据还是重试任务事件时，都会产生轮询事件流，使用 merge 合并三种事件流，再 map 成轮询事件流 loop$，同时也要注意当有新事件产生时，<strong>必须停止旧的轮询任务</strong>（上面图示中 <code>|</code> 表示完成停止）</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;"> </span><span style="color:#6E7781;">// 启动轮询，并 pipe 防止生成重复 loop</span></span>\n<span class="line"><span style="color:#24292F;"> </span><span style="color:#8250DF;">merge</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">of</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;start&#39;</span><span style="color:#24292F;">), download$, </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.retry$)</span></span>\n<span class="line"><span style="color:#24292F;">     .</span><span style="color:#8250DF;">pipe</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">         </span><span style="color:#6E7781;">// 防止频繁事件</span></span>\n<span class="line"><span style="color:#24292F;">         </span><span style="color:#8250DF;">debounceTime</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">200</span><span style="color:#24292F;">),</span></span>\n<span class="line"><span style="color:#24292F;">         </span><span style="color:#6E7781;">// 结束当前轮询，开始新的轮询</span></span>\n<span class="line"><span style="color:#24292F;">         </span><span style="color:#8250DF;">switchMap</span><span style="color:#24292F;">(</span><span style="color:#953800;">e</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> loop$)</span></span>\n<span class="line"><span style="color:#24292F;">     )</span></span>\n<span class="line"><span style="color:#24292F;">     .</span><span style="color:#8250DF;">subscribe</span><span style="color:#24292F;">();</span></span>\n<span class="line"></span></code></pre></div><p>有了 loop$，我们可以对他进行副作用操作请求列表数据，通过 <code>repeatWhen</code> pipe 操作符启动轮询，<code>takeWhile</code> 判断停止轮询</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// 轮询事件流</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> loop$ </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">of</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;loop&#39;</span><span style="color:#24292F;">)</span></span>\n<span class="line"><span style="color:#24292F;">      .</span><span style="color:#8250DF;">pipe</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">tap</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">          </span><span style="color:#6E7781;">// 执行副作用：请求数据</span></span>\n<span class="line"><span style="color:#24292F;">          </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">getTaskList</span><span style="color:#24292F;">({ start: </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">, size: </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.dataList.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">10</span><span style="color:#24292F;"> })</span></span>\n<span class="line"><span style="color:#24292F;">            .</span><span style="color:#8250DF;">then</span><span style="color:#24292F;">(({ </span><span style="color:#953800;">list</span><span style="color:#24292F;">, </span><span style="color:#953800;">pendingCount</span><span style="color:#24292F;"> }) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">              </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.dataList.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">                </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.dataList </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> list;</span></span>\n<span class="line"><span style="color:#24292F;">              } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">                </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">diff</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.dataList, list);</span></span>\n<span class="line"><span style="color:#24292F;">              }</span></span>\n<span class="line"><span style="color:#24292F;">            });</span></span>\n<span class="line"><span style="color:#24292F;">        }),</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 重复查询</span></span>\n<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">repeatWhen</span><span style="color:#24292F;">(</span><span style="color:#953800;">res$</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> res$.</span><span style="color:#8250DF;">pipe</span><span style="color:#24292F;">(</span></span>\n<span class="line"><span style="color:#24292F;">          </span><span style="color:#8250DF;">delay</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">LOOP_DELAY</span><span style="color:#24292F;">), </span><span style="color:#6E7781;">// 延迟查询</span></span>\n<span class="line"><span style="color:#24292F;">          </span><span style="color:#8250DF;">takeWhile</span><span style="color:#24292F;">(</span><span style="color:#953800;">e</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.pendingCount </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) </span><span style="color:#6E7781;">// 终止判断</span></span>\n<span class="line"><span style="color:#24292F;">        ))</span></span>\n<span class="line"><span style="color:#24292F;">      );</span></span>\n<span class="line"></span></code></pre></div><p>总结：通过 rxjs 简洁得完成了轮询的功能实现，得益于 rxjs 高度抽象的概念和操作符，这也是 rxjs 学习成本较高的原因。不过 rxjs 不仅能够优雅得异步处理，而且还能作为状态管理，不愧是作为 2016 年新版本 Angluar 出来时就内定的利器之一</p><h2 id="抛物线交互体验" tabindex="-1"><a class="header-anchor" href="#抛物线交互体验" aria-hidden="true">#</a> 抛物线交互体验</h2>',10),u=(0,l.Uk)("为了稍微增加点用户体验，在点击导出时，做个抛物线动画，把任务添加到下载中心，抛物线的实现参考 张鑫旭大神的 "),b={href:"https://www.zhangxinxu.com/wordpress/2018/08/css-css3-%E6%8A%9B%E7%89%A9%E7%BA%BF%E5%8A%A8%E7%94%BB/",target:"_blank",rel:"noopener noreferrer"},m=(0,l.Uk)("这回试试使用CSS实现抛物线运动效果"),k=(0,l.uE)('<p>主要实现思路：抛物线运动分解就是垂直方向和水平方向的运动，只要实现父子元素往不同方向进行不同速率的运动。</p><p>以下代码中，wrapper 父元素进行水平移动，ball 子元素相对 wrapper 元素进行竖直方向移动，相对而言 ball 子元素也获取水平位移</p><p>另外前端实现元素动画优先 CSS 方案，毕竟现代浏览器会对 CSS 动画有优化</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#6E7781;">// 抛物线动画</span></span>\n<span class="line"><span style="color:#24292F;"> </span><span style="color:#8250DF;">parabola</span><span style="color:#24292F;">(el) {</span></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> rect1 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> el.</span><span style="color:#8250DF;">getBoundingClientRect</span><span style="color:#24292F;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> ball </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> document.</span><span style="color:#8250DF;">createElement</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;div&#39;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.position </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;absolute&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.width </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;10px&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.height </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;10px&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.borderRadius </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;50%&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.backgroundColor </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;red&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.opacity </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.transition </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;transform .5s cubic-bezier(.2,1.01,.61,.93),opacity .5s linear&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> wrapper </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> document.</span><span style="color:#8250DF;">createElement</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;div&#39;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> initPos </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">     x: rect1.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> rect1.width </span><span style="color:#CF222E;">/</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">     y: rect1.y </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">10</span></span>\n<span class="line"><span style="color:#24292F;">   };</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.position </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;fixed&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.zIndex </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;10000&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.left </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> initPos.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;px&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.top </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> initPos.y </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;px&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.transition </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;transform .5s linear&#39;</span><span style="color:#24292F;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#6E7781;">// 动画结束 删除元素</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.</span><span style="color:#8250DF;">ontransitionend</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">     document.body.</span><span style="color:#8250DF;">removeChild</span><span style="color:#24292F;">(wrapper);</span></span>\n<span class="line"><span style="color:#24292F;">   };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">   wrapper.</span><span style="color:#8250DF;">appendChild</span><span style="color:#24292F;">(ball);     </span></span>\n<span class="line"><span style="color:#24292F;">   document.body.</span><span style="color:#8250DF;">appendChild</span><span style="color:#24292F;">(wrapper);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">   </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> rect2 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">this</span><span style="color:#24292F;">.$el.</span><span style="color:#8250DF;">getBoundingClientRect</span><span style="color:#24292F;">();</span></span>\n<span class="line"><span style="color:#24292F;">   wrapper.style.transform </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">`translateX(${</span><span style="color:#24292F;">rect2</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">x</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">+</span><span style="color:#0A3069;"> </span><span style="color:#24292F;">rect2</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">width</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">/</span><span style="color:#0A3069;"> </span><span style="color:#0550AE;">2</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">-</span><span style="color:#0A3069;"> </span><span style="color:#24292F;">initPos</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">x</span><span style="color:#0A3069;">}px)`</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.transform </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">`translateY(${</span><span style="color:#24292F;">rect2</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">y</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">+</span><span style="color:#0A3069;"> </span><span style="color:#24292F;">rect2</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">height</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">/</span><span style="color:#0A3069;"> </span><span style="color:#0550AE;">2</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">-</span><span style="color:#0A3069;"> </span><span style="color:#24292F;">rect1</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">y</span><span style="color:#0A3069;"> </span><span style="color:#CF222E;">-</span><span style="color:#0A3069;"> </span><span style="color:#0550AE;">8</span><span style="color:#0A3069;">}px)`</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;">   ball.style.opacity </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>\n<span class="line"><span style="color:#24292F;"> },</span></span>\n<span class="line"></span></code></pre></div>',4),w={},D=(0,a(3860).Z)(w,[["render",function(s,n){const a=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)("div",null,[e,t,(0,l._)("p",null,[r,(0,l._)("a",c,[y,(0,l.Wm)(a)]),F,(0,l._)("a",i,[d,(0,l.Wm)(a)]),E]),h,(0,l._)("p",null,[g,(0,l._)("a",A,[C,(0,l.Wm)(a)]),f]),x,(0,l._)("p",null,[u,(0,l._)("a",b,[m,(0,l.Wm)(a)])]),k])}]])},3860:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);