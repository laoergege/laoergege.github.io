"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[5801],{3732:(l,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-bee2f4a8",path:"/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/pnpm.html",title:"Pnpm",lang:"zh-CN",frontmatter:{release:!0,tags:["pnpm","包管理"],description:"记录 pnpm 的核心原理，如依赖机制等、工程上 Monorepo 的搭配方案、一些 npm/pnpm 用法..."},excerpt:"",headers:[{level:2,title:"依赖安装机制",slug:"依赖安装机制",children:[{level:3,title:"半严格模式",slug:"半严格模式",children:[]}]},{level:2,title:"Monorepo",slug:"monorepo",children:[]},{level:2,title:"pnpm + turborepo + changeset",slug:"pnpm-turborepo-changeset",children:[{level:3,title:"pnpm-workspace",slug:"pnpm-workspace",children:[]},{level:3,title:"turborepo 任务编排之 pipeline",slug:"turborepo-任务编排之-pipeline",children:[]},{level:3,title:"changeset",slug:"changeset",children:[]}]},{level:2,title:"学习参考",slug:"学习参考",children:[]}],git:{createdTime:1630400773e3,updatedTime:1663867943e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:19}]}}},7140:(l,n,e)=>{e.r(n),e.d(n,{default:()=>sl});var s=e(5393);const a=e.p+"assets/img/1647703499774.f2e22f99.png",o=e.p+"assets/img/image-20210324174810561.35671170.png",p=e.p+"assets/img/image-20210327112011578.8c17ef29.png",i=e.p+"assets/img/image-20210327112333206.e808e5d2.png",t=e.p+"assets/img/image-20210611145816518.387675b4.png",r=(0,s.uE)('<h1 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm" aria-hidden="true">#</a> Pnpm</h1><ul><li>Pnpm <ul><li>依赖管理 <ul><li><a href="#%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6">依赖安装机制</a><ul><li><a href="#%E5%8D%8A%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F">半严格模式</a></li></ul></li><li>auto-install-peers=true</li></ul></li><li>存储机制 <ul><li>store</li><li>基于内容寻址</li><li>hardlink</li></ul></li><li><a href="#monorepo">Monorepo</a><ul><li><a href="#pnpm--turborepo--changeset">pnpm + turborepo + changeset</a></li></ul></li><li>npm scripts</li></ul></li></ul><h2 id="依赖安装机制" tabindex="-1"><a class="header-anchor" href="#依赖安装机制" aria-hidden="true">#</a> 依赖安装机制</h2><p>pnpm 对比 yarn/npm</p>',4),u=(0,s.Uk)("yarn/npm "),c=(0,s._)("li",null,[(0,s.Uk)("npm@3 之前： "),(0,s._)("code",null,"嵌套结构"),(0,s._)("ul",null,[(0,s._)("li",null,"过度嵌套"),(0,s._)("li",null,"依赖重复、占用空间")])],-1),d=(0,s.Uk)("yarn/npm@3 之后："),h=(0,s._)("code",null,"扁平化结构",-1),m=(0,s.Uk)("本质上是"),g=(0,s._)("strong",null,"依赖提升",-1),_=(0,s.Uk)("带来的问题 "),y=(0,s.uE)("<li>依赖结构的<strong>不确定性</strong>，依据声明顺序 <ul><li>lock 文件虽在一定程度维持依赖结构，但随着包升级还是可能带来结构破坏</li></ul></li><li>扁平化算法本身的<strong>复杂性</strong>很高，耗时较长</li><li>幽灵依赖：项目中仍然可以<strong>非法访问</strong>没有声明过依赖的包，因为 <code>Node Module Resolution</code> 机制</li>",3),k={href:"https://rushjs.io/zh-cn/pages/advanced/npm_doppelgangers/",target:"_blank",rel:"noopener noreferrer"},f=(0,s.Uk)("npm 分身"),b=(0,s.Uk)("：依赖"),A=(0,s._)("strong",null,"重复安装",-1),q=(0,s.Uk)("、打包，破坏单例安装"),E=(0,s.uE)('<li>pnpm <ul><li>依赖结构：<code>平铺结构 + 符号链接</code> <img src="'+a+'" alt="图 2"><ul><li>所有的包都平铺在 <code>.pnpm</code> 内，并基于符号链接的 node_modules 结构，通过符号链接来连接依赖关系</li><li>所有的包通过硬链接到 store 内部真实文件位置</li></ul></li><li><a href="#%E5%8D%8A%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F">半严格模式</a></li></ul></li>',1),F=(0,s.uE)('<p>下面通过 pnpm 创建一个项目并且 <code>pnpm install qiankun</code> 的例子来理解 pnpm 的依赖安装结构：</p><ol><li>项目 node_modules 只存在 package 上声明的依赖，既消除项目“幽灵依赖”的问题，又使得 node_modules 结构清晰明了</li></ol><p><img src="'+o+'" alt=""></p><ol start="2"><li>qiankun 只是个<strong>软链接</strong>，解析模块时，Node 会解析符号链接，寻找符号链接原本的位置，即 <code>.pnpm/qiankun@2.4.0/node_modules/qiankun</code></li></ol><blockquote><p><code>.pnpm/</code>会以平铺的形式储存着所有的包，每个包都可以在这种命名模式的文件夹中被找到：<code>.pnpm/&lt;name&gt;@&lt;version&gt;/node_modules/&lt;name&gt;</code></p><p>与 npm3+ 以及 yarn 处理同包不同版本的是：<code>&lt;name&gt;@&lt;version&gt;</code> 的命名模式保证了包之间的相互隔离</p></blockquote><p><img src="'+p+'" alt=""></p><ol start="3"><li>pnpm 会将包本身和依赖同样平铺在同一个 node_module 下</li></ol><p><img src="'+i+'" alt=""></p><p>这样的好处：</p>',9),U=(0,s._)("li",null,"兼容 Node Module Resolution 机制",-1),v=(0,s.Uk)("避免了循环符号链接造成"),x={href:"https://github.com/pnpm/pnpm/discussions/4207",target:"_blank",rel:"noopener noreferrer"},B=(0,s.Uk)("文件循环嵌套显示的问题"),w=(0,s.uE)('<ol start="4"><li>除了 qiankun 是<strong>硬链接</strong>到全局真实存储的文件，其他依赖项都是继续<strong>符号链接</strong>到 .pnpm 下的包</li></ol><h3 id="半严格模式" tabindex="-1"><a class="header-anchor" href="#半严格模式" aria-hidden="true">#</a> 半严格模式</h3><p>如果仔细发现上面的案例，<code>node_modules/.pnpm</code> 路径下竟然会有 <code>node_modules</code> 文件，这样虽然我们自己的代码是被严格限制了，但第三方依赖包还是可以根据 Node Module Resolution 机制偷偷访问到其他包！</p><p><img src="'+t+'" alt=""></p><p>默认情况下，pnpm v5 创建一个“半严格” 的 node_modules。默认配置如下所示：</p><div class="language-yaml ext-yml"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0A3069;">; 提升所有包到 node_modules/.pnpm/node_modules</span></span>\n<span class="line"><span style="color:#0A3069;">hoist-pattern[]=*</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#0A3069;">; 提升所有名称包含types的包至根，以便Typescript能找到</span></span>\n<span class="line"><span style="color:#0A3069;">public-hoist-pattern[]=*types*</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#0A3069;">; 提升所有ESLint相关的包至根</span></span>\n<span class="line"><span style="color:#0A3069;">public-hoist-pattern[]=*eslint*</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#0A3069;">; 将所有内容提升到node_modules的根目录</span></span>\n<span class="line"><span style="color:#0A3069;">shamefully-hoist=true</span></span>\n<span class="line"></span></code></pre></div>',6),C=(0,s.Uk)("可通过 "),M=(0,s._)("code",null,"hoist=false",-1),W=(0,s.Uk)(" 来禁止包提升，更多配置详情参考"),D={href:"https://pnpm.io/zh/blog/2020/10/17/node-modules-configuration-options-with-pnpm",target:"_blank",rel:"noopener noreferrer"},j=(0,s.Uk)("《pnpm 的 node_modules 配置选项》"),z=(0,s.Uk)("。"),N=(0,s._)("p",null,[(0,s.Uk)("总的来说，"),(0,s._)("strong",null,"无论是我们还是第三方包的代码都要严格的代码访问，pnpm 的 hoist 主要是为了兼容滥用 node 特性的包"),(0,s.Uk)("。")],-1),S=(0,s._)("h2",{id:"monorepo",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#monorepo","aria-hidden":"true"},"#"),(0,s.Uk)(" Monorepo")],-1),T=(0,s._)("p",null,"Monorepo 的设计及需求要点总结：",-1),P=(0,s.uE)("<li>项目管理 <ul><li><em>引用约束：对项目间的引用、约束进行管理</em></li></ul></li><li>依赖管理 <ul><li>工程依赖</li><li>项目依赖 <ul><li>本地 link 模式</li><li>线上版本模式</li></ul></li></ul></li><li>任务管理 <ul><li>编排 <ul><li>拓扑：根据项目依赖关系，构建一个有向无环图（DAG）进行拓扑排序并执行过程</li><li>过滤</li><li>并行</li><li>增量 <ul><li>How to Check Change? <ul><li>文件监听</li><li>产物 Hash</li></ul></li><li>缓存 <ul><li>本地缓存</li><li>分布式缓存</li></ul></li></ul></li></ul></li><li>监听模式</li></ul></li><li>发包 <ul><li>版本管理 version <ul><li>版本语义 semver</li><li>发版模式（monorepo 模式特有） <ul><li>independent</li><li>fixed</li></ul></li></ul></li><li>发版日志 changelog</li><li>包的发布 publish</li></ul></li>",4),R=(0,s.Uk)("流行组合方案 "),G=(0,s._)("li",null,"pnpm（依赖管理 + 任务管理） + changeset（发包）",-1),H=(0,s.Uk)("pnpm（依赖管理）+ "),L={href:"https://github.com/microsoft/rushstack",target:"_blank",rel:"noopener noreferrer"},O=(0,s.Uk)("rush"),X=(0,s.Uk)("（任务管理 + 发包）"),Z=(0,s._)("li",null,"pnpm（依赖管理）+ Turborepo（任务管理） + changeset（发包）",-1),I=(0,s.uE)('<h2 id="pnpm-turborepo-changeset" tabindex="-1"><a class="header-anchor" href="#pnpm-turborepo-changeset" aria-hidden="true">#</a> pnpm + turborepo + changeset</h2><ul><li>项目创建</li><li>依赖关联 <ul><li>pnpm：默认情况下，如果可用的 packages 与已声明的可用范围相匹配，pnpm 将从工作区链接这些 packages</li></ul></li><li>任务管理 <ul><li>拓扑 <ul><li><code>turbo:depends</code><ul><li>依赖上游包的任务</li><li>依赖自身包的任务</li><li>手动指定依赖任务</li></ul></li></ul></li></ul></li></ul><h3 id="pnpm-workspace" tabindex="-1"><a class="header-anchor" href="#pnpm-workspace" aria-hidden="true">#</a> pnpm-workspace</h3><h3 id="turborepo-任务编排之-pipeline" tabindex="-1"><a class="header-anchor" href="#turborepo-任务编排之-pipeline" aria-hidden="true">#</a> turborepo 任务编排之 pipeline</h3><p><code>turbo run &lt;task&gt;</code></p><div class="language-yaml ext-yml"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#116329;">packages</span><span style="color:#24292F;">:</span></span>\n<span class="line"><span style="color:#24292F;">  - </span><span style="color:#0A3069;">&quot;plugins&quot;</span></span>\n<span class="line"><span style="color:#24292F;">  - </span><span style="color:#0A3069;">&quot;packages/*&quot;</span></span>\n<span class="line"><span style="color:#24292F;">  - </span><span style="color:#0A3069;">&quot;.&quot;</span></span>\n<span class="line"></span></code></pre></div><div class="language-json ext-json"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">{</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#0550AE;">&quot;$schema&quot;</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&quot;https://turborepo.org/schema.json&quot;</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#0550AE;">&quot;baseBranch&quot;</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&quot;origin/main&quot;</span><span style="color:#24292F;">,</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#0550AE;">&quot;pipeline&quot;</span><span style="color:#24292F;">: {</span></span>\n<span class="line"><span style="color:#24292F;">    </span><span style="color:#0550AE;">&quot;build&quot;</span><span style="color:#24292F;">: {</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#0550AE;">&quot;inputs&quot;</span><span style="color:#24292F;">: [</span><span style="color:#0A3069;">&quot;src/**/*.ts&quot;</span><span style="color:#24292F;">],</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#0550AE;">&quot;outputs&quot;</span><span style="color:#24292F;">: [</span><span style="color:#0A3069;">&quot;lib/**/*&quot;</span><span style="color:#24292F;">],</span></span>\n<span class="line"><span style="color:#24292F;">      </span><span style="color:#0550AE;">&quot;dependsOn&quot;</span><span style="color:#24292F;">: [</span><span style="color:#0A3069;">&quot;^build&quot;</span><span style="color:#24292F;">]</span></span>\n<span class="line"><span style="color:#24292F;">    }</span></span>\n<span class="line"><span style="color:#24292F;">  }</span></span>\n<span class="line"><span style="color:#24292F;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="changeset" tabindex="-1"><a class="header-anchor" href="#changeset" aria-hidden="true">#</a> changeset</h3><ul><li>changeset init：初始化</li><li>changeset</li><li>changeset version</li><li>changeset publish</li></ul><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考" aria-hidden="true">#</a> 学习参考</h2>',10),J={href:"https://pnpm.io/zh/",target:"_blank",rel:"noopener noreferrer"},Q=(0,s.Uk)("pnpm"),Y={href:"https://pnpm.io/zh/blog/2020/05/27/flat-node-modules-is-not-the-only-way",target:"_blank",rel:"noopener noreferrer"},$=(0,s.Uk)("平铺的结构不是 node_modules 的唯一实现方式"),K={href:"https://mp.weixin.qq.com/s/1Wm-iYFBgJXMg_7SgWktXA",target:"_blank",rel:"noopener noreferrer"},V=(0,s.Uk)("关于现代包管理器的深度思考——为什么现在我更推荐 pnpm 而不是 npm/yarn?"),ll={href:"https://mp.weixin.qq.com/s/U8_30S9B0S_SU3jdgUxFGQ",target:"_blank",rel:"noopener noreferrer"},nl=(0,s.Uk)("Monorepo 的过去、现在、和未来"),el={},sl=(0,e(3860).Z)(el,[["render",function(l,n){const e=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[r,(0,s._)("ul",null,[(0,s._)("li",null,[u,(0,s._)("ul",null,[c,(0,s._)("li",null,[d,h,(0,s._)("ul",null,[(0,s._)("li",null,[m,g,_,(0,s._)("ul",null,[y,(0,s._)("li",null,[(0,s._)("a",k,[f,(0,s.Wm)(e)]),b,A,q])])])])])])]),E]),F,(0,s._)("ul",null,[U,(0,s._)("li",null,[v,(0,s._)("a",x,[B,(0,s.Wm)(e)])])]),w,(0,s._)("p",null,[C,M,W,(0,s._)("a",D,[j,(0,s.Wm)(e)]),z]),N,S,T,(0,s._)("ul",null,[P,(0,s._)("li",null,[R,(0,s._)("ul",null,[G,(0,s._)("li",null,[H,(0,s._)("a",L,[O,(0,s.Wm)(e)]),X]),Z])])]),I,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",J,[Q,(0,s.Wm)(e)])]),(0,s._)("li",null,[(0,s._)("a",Y,[$,(0,s.Wm)(e)])]),(0,s._)("li",null,[(0,s._)("a",K,[V,(0,s.Wm)(e)])]),(0,s._)("li",null,[(0,s._)("a",ll,[nl,(0,s.Wm)(e)])])])])}]])},3860:(l,n)=>{n.Z=(l,n)=>{const e=l.__vccOpts||l;for(const[l,s]of n)e[l]=s;return e}}}]);