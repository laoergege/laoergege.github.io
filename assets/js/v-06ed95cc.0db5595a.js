"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[8237],{2376:(l,s,i)=>{i.r(s),i.d(s,{data:()=>n});const n={key:"v-06ed95cc",path:"/JavaScript/JavaScript%20%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84.html",title:"JavaScript 语法结构",lang:"zh-CN",frontmatter:{release:!0,tags:["javascript","语法"],desc:"JavaScript 语法结构体系"},excerpt:"",headers:[{level:2,title:"自动插入分号规则",slug:"自动插入分号规则",children:[{level:3,title:"no LineTerminator here （不能有换行符）规则",slug:"no-lineterminator-here-不能有换行符-规则",children:[]},{level:3,title:"手写分号的特殊情况",slug:"手写分号的特殊情况",children:[]}]},{level:2,title:"表达式",slug:"表达式",children:[]}],git:{createdTime:1641449482e3,updatedTime:1665411796e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:16}]}}},1655:(l,s,i)=>{i.r(s),i.d(s,{default:()=>N});var n=i(5393);const a=i.p+"assets/img/1642671148832.16870aa8.png",e=i.p+"assets/img/1641360549128.b289a0cc.png",o=(0,n._)("h1",{id:"javascript-语法结构",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#javascript-语法结构","aria-hidden":"true"},"#"),(0,n.Uk)(" JavaScript 语法结构")],-1),p=(0,n.Uk)("JavaScript 文法 "),r=(0,n.Uk)("词法 "),t=(0,n._)("li",null,[(0,n._)("a",{href:"#%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5%E5%88%86%E5%8F%B7%E8%A7%84%E5%88%99"},"自动插入分号规则")],-1),c=(0,n.Uk)("分词 "),u=(0,n._)("li",null,"空格",-1),d=(0,n._)("li",null,"换行",-1),E=(0,n._)("li",null,"注释",-1),y=(0,n.Uk)("token "),h=(0,n._)("li",null,"标识符",-1),g=(0,n._)("li",null,"关键词",-1),f=(0,n._)("li",null,"运算符",-1),_=(0,n.Uk)("字面量 "),F=(0,n._)("li",null,"数字直接量",-1),m=(0,n.Uk)("字符串直接量 "),v=(0,n.Uk)("转义字符串"),k=(0,n._)("li",null,"字符串模板",-1),x=(0,n._)("li",null,"等",-1),b=(0,n.Uk)("语法 "),A=(0,n._)("li",null,[(0,n.Uk)("指令序言（JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面） "),(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("code",null,"use strict")])])],-1),C=(0,n.Uk)("语句 "),U=(0,n.uE)('<li>变量声明 <ul><li>var</li><li>function</li><li>let</li><li>const</li><li>class</li></ul></li><li>赋值语句</li><li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>及运算符</li><li>控制流 <ul><li>分支 <ul><li>if/else</li><li>switch</li></ul></li><li>循环 <ul><li>递归</li><li>遍历 <ul><li>while/do、while/for</li><li>for</li></ul></li><li>属性枚举 <ul><li>for in</li></ul></li><li>迭代器模式 <ul><li>for of</li><li>for await of</li></ul></li></ul></li><li>错误跳转 try-catch-finally <ul><li>即使在 try 中出现了 return，finally 中的语句也一定要被先执行</li><li>finally 中的 return 会覆盖 try 中的 return</li></ul></li></ul></li><li>函数 <ul><li>普通函数/成员函数</li><li>箭头函数</li><li>生成器函数（generator）</li><li>异步函数（async）</li><li>异步生成器函数</li></ul></li>',5),S=(0,n.Uk)("JavaScript 有两种源文件 "),w=(0,n._)("li",null,"脚本",-1),B=(0,n.Uk)("模块"),J=(0,n.uE)('<h2 id="自动插入分号规则" tabindex="-1"><a class="header-anchor" href="#自动插入分号规则" aria-hidden="true">#</a> 自动插入分号规则</h2><p>JavaScript 代码可以不用写分号符，编译器可以根据换行符自动判断插入分号，但在某些情况下最好写上分号符，因为编译器区分不出是否要插入分号。</p><p><img src="'+a+'" alt="图 10"></p><p>自动插入分号规则总结如下：</p><ol><li>有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。</li><li>有换行符，且语法中规定此处<strong>不能有换行符</strong>，那么就自动插入分号。</li><li>源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。</li></ol><h3 id="no-lineterminator-here-不能有换行符-规则" tabindex="-1"><a class="header-anchor" href="#no-lineterminator-here-不能有换行符-规则" aria-hidden="true">#</a> no LineTerminator here （不能有换行符）规则</h3><p>空格符会被编译器丢弃，而换行符会进行处理判断。</p><p><img src="'+e+'" alt="图 9"></p><p>比如后自增、后自减运算符：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> a </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">a </span><span style="color:#6E7781;">/*no LineTerminator here*/</span></span>\n<span class="line"><span style="color:#CF222E;">++</span></span>\n<span class="line"><span style="color:#6E7781;">// a; ++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(a) </span><span style="color:#6E7781;">// 1</span></span>\n<span class="line"></span></code></pre></div><h3 id="手写分号的特殊情况" tabindex="-1"><a class="header-anchor" href="#手写分号的特殊情况" aria-hidden="true">#</a> 手写分号的特殊情况</h3><p>需要手写分号的都是编译器无法区分的情况，即上一个符号与下一个符号之间组合可能存在意义比如</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> a </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> [[</span><span style="color:#0550AE;">1</span><span style="color:#24292F;">]][</span><span style="color:#0550AE;">0</span><span style="color:#24292F;">].</span><span style="color:#8250DF;">map</span><span style="color:#24292F;">((</span><span style="color:#953800;">e</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#6E7781;">// 被当作数组下标运算 [][]</span></span>\n<span class="line"><span style="color:#6E7781;">// let a = [[1]][0].map(e =&gt; 2)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(a); </span><span style="color:#6E7781;">// [2]</span></span>\n<span class="line"></span></code></pre></div><p>总结有：</p><ol><li><p>以<strong>括号</strong>开头的语句，比如 IIFE。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">(</span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> (</span><span style="color:#953800;">a</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(a);</span></span>\n<span class="line"><span style="color:#24292F;">})()(</span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> (</span><span style="color:#953800;">a</span><span style="color:#24292F;">) {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(a);</span></span>\n<span class="line"><span style="color:#24292F;">})();</span></span>\n<span class="line"></span></code></pre></div><p>JavaScript 引擎会认为第一个 IIFE 返回的是一个函数，第二 IIFE 会被当作函数调用传参，导致抛出错误。</p></li><li><p>以<strong>数组</strong>开头的语句。</p></li><li><p>以正则表达式开头的语句，正则的第一个<strong>斜杠</strong>被理解成了除号。</p></li><li><p>以 Template 开头的语句。</p></li></ol><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><p>事实上，真正能干活的就只有表达式语句，其它语句的作用都是产生各种结构，来控制表达式语句执行，或者改变表达式语句的意义。</p><p>表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的。</p>',18),D=(0,n.Uk)("以下只是 "),j={href:"https://tc39.es/ecma262/#sec-ecmascript-language-expressions",target:"_blank",rel:"noopener noreferrer"},I=(0,n.Uk)("ECMA 表达式"),L=(0,n.Uk)("部分，表达式都是从高优先级、粒度从小逐级构成："),T=(0,n.uE)("<blockquote><p>通俗得理解出现在赋值表达式左边的叫左值表达式、右边的叫做右值表达式；<br> 左值是能够解析获得一个内存地址引用，右值是值，由字面量值或者左值和运算符构成的表达式得到</p></blockquote><ol><li>PrimaryExpression 主要表达式 <ul><li>各种直接字面量， 如 <code>123</code>、<code>[]</code></li><li>this</li><li>变量名</li><li><strong>任何表达式加上圆括号，都被认为是 Primary Expression，这个机制使得圆括号成为改变运算优先顺序的手段</strong></li></ul></li><li>LeftHandSideExpression 左值表达式 <ol><li>MemberExpression 成员表达式 <ul><li>如 <code>a.b</code>、<code>a[&quot;b&quot;]</code></li><li>以下两种特殊 JS 语法，仅仅意味着它们跟属性运算属于同一优先级，没有任何语义上的关联 <ul><li>带函数的模板，<code>f`a${b}c`;</code></li><li><strong>带参数列表的 new 运算</strong>，<code>new Cls();</code></li></ul></li></ul></li><li>NewExpression NEW 表达式 <ul><li>特指没有参数列表的表达式，<code>new Cls</code></li></ul></li><li>CallExpression 函数调用表达式</li><li>可选链 <code>?.</code></li><li>空值合并运算符 <code>??</code></li></ol></li><li>右值表达式（左值与运算符结合） <ol><li>更新表达式 UpdateExpression</li><li>一元运算表达式 UnaryExpression <ul><li><code>~</code> 按位取非运算符</li></ul></li><li>二元运算表达式 <ol><li>乘方表达式 ExponentiationExpression <ul><li><code>2**3 === 8</code>，** 运算是右结合的</li></ul></li><li>乘法表达式 MultiplicativeExpression <ul><li>乘法表达式有三种运算符：<code>* / %</code></li></ul></li><li>加法表达式 AdditiveExpression <ul><li>加法表达式有加号和减号两种运算符</li></ul></li><li>移位表达式 ShiftExpression <ul><li><code>&lt;&lt;</code> 向左移位</li><li><code>&gt;&gt;</code> 向右移位 <ul><li>右移 n 位相当于除以 2 取整 n 次</li></ul></li><li><code>&gt;&gt;&gt;</code> 无符号向右移位</li></ul></li><li>关系表达式 RelationalExpression <ul><li>in</li></ul></li><li>比较表达式 <ol><li>相等表达式 EqualityExpression</li></ol></li><li>位运算表达式 <ul><li>按位与表达式 BitwiseANDExpression</li><li>按位异或表达式 BitwiseANDExpression <ul><li>异或运算 <ul><li>两次异或运算相当于取消，可以用异或运算来交换两个整数的值。</li><li>按位或运算常常被用在一种叫做 Bitmask 的技术上。Bitmask 相当于使用一个整数来当做多个布尔型变量</li></ul></li></ul></li><li>按位或表达式 BitwiseORExpression</li></ul></li><li>逻辑运算符 <ul><li><code>&amp;&amp;</code></li><li><code>||</code></li><li>空值合并运算符 <code>??</code>：<code>a ?? b</code> a 为 null 或者 undefined 则选择 b</li></ul></li></ol></li><li>三元运算符 <ul><li>条件表达式 ConditionalExpression：<code>condition ? branch1 : branch2</code></li></ul></li></ol></li><li>AssignmentExpression 赋值表达式</li><li>逗号运算符</li></ol>",2),q={},N=(0,i(3860).Z)(q,[["render",function(l,s){const i=(0,n.up)("RouterLink"),a=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)("div",null,[o,(0,n._)("ul",null,[(0,n._)("li",null,[p,(0,n._)("ul",null,[(0,n._)("li",null,[r,(0,n._)("ul",null,[t,(0,n._)("li",null,[c,(0,n._)("ul",null,[u,d,E,(0,n._)("li",null,[y,(0,n._)("ul",null,[h,g,f,(0,n._)("li",null,[_,(0,n._)("ul",null,[F,(0,n._)("li",null,[m,(0,n._)("ul",null,[(0,n._)("li",null,[(0,n.Wm)(i,{to:"/JavaScript/JavaScript%20%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2.html"},{default:(0,n.w5)((()=>[v])),_:1})])])]),k,x])])])])])])])]),(0,n._)("li",null,[b,(0,n._)("ul",null,[A,(0,n._)("li",null,[C,(0,n._)("ul",null,[U,(0,n._)("li",null,[S,(0,n._)("ul",null,[w,(0,n._)("li",null,[(0,n.Wm)(i,{to:"/JavaScript/JavaScript%20%E6%A8%A1%E5%9D%97.html"},{default:(0,n.w5)((()=>[B])),_:1})])])])])])])])])])]),J,(0,n._)("p",null,[D,(0,n._)("a",j,[I,(0,n.Wm)(a)]),L]),T])}]])},3860:(l,s)=>{s.Z=(l,s)=>{const i=l.__vccOpts||l;for(const[l,n]of s)i[l]=n;return i}}}]);