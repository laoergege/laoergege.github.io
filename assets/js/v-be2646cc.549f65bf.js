"use strict";(self.webpackChunklaoergege_blog=self.webpackChunklaoergege_blog||[]).push([[2778],{9577:(s,n,l)=>{l.r(n),l.d(n,{data:()=>a});const a={key:"v-be2646cc",path:"/NodeJS/Node.js%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html",title:"Node.js 事件循环",lang:"zh-CN",frontmatter:{release:!0,tags:["NodeJS","事件循环"]},excerpt:"",headers:[{level:2,title:"Node.js 11.x 执行模型前后差异",slug:"node-js-11-x-执行模型前后差异",children:[]}],git:{createdTime:1645426173e3,updatedTime:1654272772e3,contributors:[{name:"连远生",email:"lianyuansheng@xiao100.com",commits:4}]}}},7860:(s,n,l)=>{l.r(n),l.d(n,{default:()=>c});var a=l(5393);const p=l.p+"assets/img/image-20210316173228321.faff5113.png",o=[(0,a.uE)('<h1 id="node-js-事件循环" tabindex="-1"><a class="header-anchor" href="#node-js-事件循环" aria-hidden="true">#</a> Node.js 事件循环</h1><p><img src="'+p+'" alt="image-20210316173228321"></p><p>Node.js 事件循环分为 6 个阶段，每个阶段都有一个 FIFO（先进先出）队列执行回调函数，这几个阶段之间执行的优先级顺序还是明确的。</p><ol><li>timers（定时器阶段）：<code>setTimeout</code>、<code>setInterval</code></li><li>pending callbacks：处理一些上一轮循环中的少数未执行的 I/O 回调</li><li>idle, prepare：仅系统内部使用</li><li>IO poll <ul><li>执行 I/O 回调 <ul><li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li><li>如果 poll 队列为空时，会有两件事发生 <ul><li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li><li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，另外事件循环将检查 <em>已达到时间阈值的计时器</em>。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调</li></ul></li></ul></li></ul></li><li>check：<code>setImmediate</code></li><li>close callbacks</li></ol><p>微任务队列</p><ul><li>纳米任务队列 <ul><li>process.nextTick</li></ul></li><li>普通微任务队列 <ul><li>promise.then、promise.reject</li></ul></li></ul><h2 id="node-js-11-x-执行模型前后差异" tabindex="-1"><a class="header-anchor" href="#node-js-11-x-执行模型前后差异" aria-hidden="true">#</a> Node.js 11.x 执行模型前后差异</h2><p>Node.js 11.x 前：在一个宏任务队列全部执行完毕后，去清空一次微任务队列，然后到下一个等级的宏任务队列，以此往复。</p><p>Node.js 11.x 前后：node 端的事件循环变得和浏览器类似，先执行一个宏任务，然后是一个微任务队列。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;Script开始&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#0550AE;">setTimeout</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;宏任务1（setTimeout)&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">resolve</span><span style="color:#24292F;">().</span><span style="color:#8250DF;">then</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">    console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;微任务promise2&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">  });</span></span>\n<span class="line"><span style="color:#24292F;">}, </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#8250DF;">setImmediate</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;宏任务2&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"><span style="color:#0550AE;">setTimeout</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;宏任务3（setTimeout)&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">}, </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;Script结束&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">resolve</span><span style="color:#24292F;">().</span><span style="color:#8250DF;">then</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;微任务promise1&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"><span style="color:#24292F;">process.</span><span style="color:#8250DF;">nextTick</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>\n<span class="line"><span style="color:#24292F;">  console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;微任务nextTick&quot;</span><span style="color:#24292F;">);</span></span>\n<span class="line"><span style="color:#24292F;">});</span></span>\n<span class="line"></span></code></pre></div><div class="language-text ext-text"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292f;">// 11.x 前</span></span>\n<span class="line"><span style="color:#24292f;">Script开始</span></span>\n<span class="line"><span style="color:#24292f;">Script结束</span></span>\n<span class="line"><span style="color:#24292f;">微任务nextTick</span></span>\n<span class="line"><span style="color:#24292f;">微任务promise1</span></span>\n<span class="line"><span style="color:#24292f;">宏任务1（setTimeout)</span></span>\n<span class="line"><span style="color:#24292f;">宏任务3（setTimeout)</span></span>\n<span class="line"><span style="color:#24292f;">微任务promise2</span></span>\n<span class="line"><span style="color:#24292f;">宏任务2（setImmediate)</span></span>\n<span class="line"><span style="color:#24292f;"></span></span>\n<span class="line"><span style="color:#24292f;">// 11.x 后</span></span>\n<span class="line"><span style="color:#24292f;">Script开始</span></span>\n<span class="line"><span style="color:#24292f;">Script结束</span></span>\n<span class="line"><span style="color:#24292f;">微任务nextTick</span></span>\n<span class="line"><span style="color:#24292f;">微任务promise1</span></span>\n<span class="line"><span style="color:#24292f;">宏任务1（setTimeout)</span></span>\n<span class="line"><span style="color:#24292f;">微任务promise2</span></span>\n<span class="line"><span style="color:#24292f;">宏任务3（setTimeout)</span></span>\n<span class="line"><span style="color:#24292f;">宏任务2（setImmediate)</span></span>\n<span class="line"><span style="color:#24292f;"></span></span></code></pre></div>',11)],e={},c=(0,l(3860).Z)(e,[["render",function(s,n){return(0,a.wg)(),(0,a.iD)("div",null,o)}]])},3860:(s,n)=>{n.Z=(s,n)=>{const l=s.__vccOpts||s;for(const[s,a]of n)l[s]=a;return l}}}]);